<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NOTHING</title>
  <icon>https://www.gravatar.com/avatar/d9ace8a0b4d76d8e8802cb1b2b061cad</icon>
  <subtitle>NOTHING IS EVERYTHING.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://charlesblog.site/"/>
  <updated>2018-05-07T02:17:42.733Z</updated>
  <id>http://charlesblog.site/</id>
  
  <author>
    <name>Charles</name>
    <email>2275572017@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://charlesblog.site/2018/05/07/hello-world/"/>
    <id>http://charlesblog.site/2018/05/07/hello-world/</id>
    <published>2018-05-07T02:17:42.733Z</published>
    <updated>2018-05-07T02:17:42.733Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你一定不知道Swift源码怎么看？</title>
    <link href="http://charlesblog.site/2018/05/03/%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E7%9F%A5%E9%81%93Swift%E6%BA%90%E7%A0%81%E6%80%8E%E4%B9%88%E7%9C%8B%EF%BC%9F/"/>
    <id>http://charlesblog.site/2018/05/03/你一定不知道Swift源码怎么看？/</id>
    <published>2018-05-03T15:19:00.000Z</published>
    <updated>2018-05-07T02:17:42.734Z</updated>
    
    <content type="html"><![CDATA[<p>我想你一定是在开玩笑。<br>源码怎么看，打开看呗！说这话的时候请收下我的轻蔑，哈哈。不过就这个问题我今天在知乎搜索了一通。不要问我为什么在知乎搜索，鬼知道知乎什么都有。<br>那么，请收下我的提问：<br><a id="more"></a></p><blockquote><p><a href="https://www.zhihu.com/question/38215419" target="_blank" rel="noopener">如何阅读Swift源码</a></p></blockquote><p>知乎果然没有让我失望，结果教程如下；</p><blockquote><p><a href="http://swift.gg/2016/12/30/how-to-read-the-swift-standard-libray-source/" target="_blank" rel="noopener"># <a href="http://swift.gg/2016/12/30/how-to-read-the-swift-standard-libray-source/" title="如何阅读 Swift 标准库中的源码" target="_blank" rel="noopener">如何阅读 Swift 标准库中的源码</a></a></p></blockquote><p>顺便提一下，这次搜索还让我发现了一个比较不错的swift网站，有心的同学请收下：<a href="http://swift.gg" target="_blank" rel="noopener">swift.gg</a></p><p>于是今天搞了下源码的编译，并了解到一个叫做 <em>GYB</em> 的东西，这个东西今天先放一下。源碼編譯的過程無非就是用 <em>brew</em> 下了一些命令行軟件，然後使用 <em>build</em> 腳本跑一下過程，在此也不多說。但是今天的重點當然是我們要從源碼出發搞一些事情。<br>续：今天又build，发现也并没有得出什么重要的东西，只是把gyb文件生成为swift文件，其他过程不知道它经历了什么，对我想看源码没有任何作用，还跑了整整一个下午；对于只是想看代码的同学，还是用官网给出的gyb.py脚本做处理吧；</p><ol><li>hashable</li></ol><p>前两天写Dictionary时发现想用枚举做key，自定义一个Dictionary，value是#selector，但是在写的过程中发现说key值需要遵循hashable协议。可以看源码来理解一下。<br>首先要找到Hashable文件，发现swift的标准核心库被放在 <strong>stdlib/public/core</strong> 下，有一个 <strong>Hashable.swift</strong> 文件，打开文件先是一大段的描述，大体内容就是hashable协议作用的场景，以及给出了一个小例子；</p><p>一个Hash类型，提供了一个 hashValue 的属性，它是一个整型常量， 如果有两个相同类型的a，b，如果 a == b，那么 a.hashValue == b.hashValue；但是反过来，如果两个hash值相同，并不表示a 就一定等于 b；<br>还有一点非常重要，就是在两次不同的程序执行中hash值并不保证相等，所以不要把hash值用在你的程序中；<br>Hashable协议可用于struct, enum, class，它继承于 Equatable，所以遵循Hashable协议需要同时实现Hashable协议方法，以及 Equatable 协议方法；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/// A point in an x-y coordinate system.</span><br><span class="line">    struct GridPoint &#123;</span><br><span class="line">        var x: Int</span><br><span class="line">        var y: Int</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     extension GridPoint: Hashable &#123;</span><br><span class="line">         var hashValue: Int &#123;</span><br><span class="line">            return x.hashValue ^ y.hashValue &amp;* 16777619</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static func == (lhs: GridPoint, rhs: GridPoint) -&gt; Bool &#123;</span><br><span class="line">            return lhs.x == rhs.x &amp;&amp; lhs.y == rhs.y</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       var tappedPoints: Set = [GridPoint(x: 2, y: 3), GridPoint(x: 4, y: 1)]</span><br><span class="line">       let nextTap = GridPoint(x: 0, y: 1)</span><br><span class="line">       if tappedPoints.contains(nextTap) &#123;</span><br><span class="line">          print(&quot;Already tapped at (\(nextTap.x), \(nextTap.y)).&quot;)</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">          tappedPoints.insert(nextTap)</span><br><span class="line">          print(&quot;New tap detected at (\(nextTap.x), \(nextTap.y)).&quot;)</span><br><span class="line">       &#125;</span><br><span class="line">      // Prints &quot;New tap detected at (0, 1).&quot;)</span><br></pre></td></tr></table></figure><p>在实现的代码里有一些奇怪的符号，暂时还有点摸不清头脑，有些是一些编译符号，大体能看懂点意思，但有些像<code>@_silgen_name(&quot;_swift_stdlib_Hashable_isEqual_indirect&quot;)</code>就完全看不懂，回头找人再请教；<br>这里还要说的一个就是一个<code>UnsafePointer&lt;T&gt;</code>:</p><blockquote><p>在 Swift 中，指针都使用一个特殊的类型来表示，那就是 UnsafePointer<t>。遵循了 Cocoa 的一贯不可变原则，UnsafePointer<t> 也是不可变的。当然对应地，它还有一个可变变体，UnsafeMutablePointer<t>。绝大部分时间里，C 中的指针都会被以这两种类型引入到 Swift 中：C 中 const 修饰的指针对应 UnsafePointer (最常见的应该就是 C 字符串的 const char * 了)，而其他可变的指针则对应 UnsafeMutablePointer。除此之外，Swift 中存在表示一组连续数据指针的 UnsafeBufferPointer<t>，表示非完整结构的不透明指针 COpaquePointer 等等。另外你可能已经注意到了，能够确定指向内容的指针类型都是泛型的 struct，我们可以通过这个泛型来对指针指向的类型进行约束以提供一定安全性。</t></t></t></t></p></blockquote><p>需要具体了解的看这篇：<a href="https://onevcat.com/2015/01/swift-pointer/" target="_blank" rel="noopener">UnsafePointe<t></t></a></p><p>顺便吐槽句哈，apple的代码也还有这种东西，也不知道是修改过的没有；<br><img src="https://upload-images.jianshu.io/upload_images/1429775-225ee3ef5a38e747.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FIXME"></p><ol start="2"><li>Equatable</li></ol><ul><li>它是一种可用于值比较的类型；</li><li>在序列和集合操作中，可以将一个遵循了<code>Equatable</code>协议的对象传递给<code>contaions(_:)</code>方法，来确定是否包含，用法如下：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">"Nora"</span>, <span class="string">"Fern"</span>, <span class="string">"Ryan"</span>, <span class="string">"Rainer"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nameToCheck = <span class="string">"Ryan"</span></span><br><span class="line"><span class="keyword">if</span> students.<span class="built_in">contains</span>(nameToCheck) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(nameToCheck)</span> is signed up!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No record of <span class="subst">\(nameToCheck)</span>."</span>)</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// Prints "Ryan is signed up!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Conforming to the Equatable Protocol</span></span><br></pre></td></tr></table></figure><ul><li>本地类型继承自<code>Equatable</code>协议需要注意：<ol><li>对于一个<code>struct</code>类型，它的所有存储属性都需要遵循<code>Equatable</code>协议；</li><li>对于一个<code>enum</code>类型，它的所有关联值都需要遵循<code>Equatable</code>协议；</li><li>如果上述标准不符合，需要在扩展中实现<code>==</code>静态方法；<br>例如：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class StreetAddress &#123;</span><br><span class="line">    let number: String</span><br><span class="line">    let street: String</span><br><span class="line">    let unit: String?</span><br><span class="line">    init(_ number: String, _ street: String, unit: String? = nil) &#123;</span><br><span class="line">        self.number = number</span><br><span class="line">        self.street = street</span><br><span class="line">        self.unit = unit</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension StreetAddress: Equatable &#123;</span><br><span class="line">    static func == (lhs: StreetAddress, rhs: StreetAddress) -&gt; Bool &#123;</span><br><span class="line">        return</span><br><span class="line">            lhs.number == rhs.number &amp;&amp;</span><br><span class="line">            lhs.street == rhs.street &amp;&amp;</span><br><span class="line">            lhs.unit == rhs.unit</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let addresses = [StreetAddress(&quot;1490&quot;, &quot;Grove Street&quot;),</span><br><span class="line">                 StreetAddress(&quot;2119&quot;, &quot;Maple Avenue&quot;),</span><br><span class="line">                 StreetAddress(&quot;1400&quot;, &quot;16th Street&quot;)]</span><br><span class="line">let home = StreetAddress(&quot;1400&quot;, &quot;16th Street&quot;)</span><br><span class="line">print(addresses[0] == home)</span><br><span class="line">// Prints &quot;false&quot;</span><br><span class="line">print(addresses.contains(home))</span><br><span class="line">// Prints &quot;true&quot;</span><br></pre></td></tr></table></figure><ul><li>另外我在这个实现里面看到了以前数学课知识的身影：</li></ul><ul><li><code>a == a</code> is always <code>true</code> (Reflexivity)   # 自反性</li><li><code>a == b</code> implies <code>b == a</code> (Symmetry)  # 对称性</li><li><code>a == b</code> and <code>b == c</code> implies <code>a == c</code> (Transitivity)  # 传递性<br>所以我们定义的<code>==</code>(两对象相等)完全取决于我们自己实现的静态方法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class IntegerRef: Equatable &#123;</span><br><span class="line">    let value: Int</span><br><span class="line">    init(_ value: Int) &#123;</span><br><span class="line">        self.value = value</span><br><span class="line">    &#125;</span><br><span class="line">    static func == (lhs: IntegerRef, rhs: IntegerRef) -&gt; Bool &#123;</span><br><span class="line">        return lhs.value == rhs.value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let a = IntegerRef(100)</span><br><span class="line">let b = IntegerRef(100)</span><br><span class="line">print(a == a, a == b, separator: &quot;, &quot;)</span><br><span class="line">// Prints &quot;true, true&quot;</span><br></pre></td></tr></table></figure><p>而不相等的定义则完全是，自实现的相等操作取反：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">extension Equatable &#123;</span><br><span class="line">  /// Returns a Boolean value indicating whether two values are not equal.</span><br><span class="line">  ///</span><br><span class="line">  /// Inequality is the inverse of equality. For any values `a` and `b`, `a != b`</span><br><span class="line">  /// implies that `a == b` is `false`.</span><br><span class="line">  ///</span><br><span class="line">  /// This is the default implementation of the not-equal-to operator (`!=`)</span><br><span class="line">  /// for any type that conforms to `Equatable`.</span><br><span class="line">  ///</span><br><span class="line">  /// - Parameters:</span><br><span class="line">  ///   - lhs: A value to compare.</span><br><span class="line">  ///   - rhs: Another value to compare.</span><br><span class="line">  @inlinable // FIXME(sil-serialize-all)</span><br><span class="line">  @_transparent</span><br><span class="line">  public static func != (lhs: Self, rhs: Self) -&gt; Bool &#123;</span><br><span class="line">    return !(lhs == rhs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实现是已经定义好的！！!</p><ul><li><code>==</code>与<code>===</code>的区别<br>看一下这两者的区别：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public protocol Equatable &#123;</span><br><span class="line">  /// Returns a Boolean value indicating whether two values are equal.</span><br><span class="line">  ///</span><br><span class="line">  /// Equality is the inverse of inequality. For any values `a` and `b`,</span><br><span class="line">  /// `a == b` implies that `a != b` is `false`.</span><br><span class="line">  ///</span><br><span class="line">  /// - Parameters:</span><br><span class="line">  ///   - lhs: A value to compare.</span><br><span class="line">  ///   - rhs: Another value to compare.</span><br><span class="line">  static func == (lhs: Self, rhs: Self) -&gt; Bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@inlinable // FIXME(sil-serialize-all)</span><br><span class="line">public func === (lhs: AnyObject?, rhs: AnyObject?) -&gt; Bool &#123;</span><br><span class="line">  switch (lhs, rhs) &#123;</span><br><span class="line">  case let (l?, r?):</span><br><span class="line">    return ObjectIdentifier(l) == ObjectIdentifier(r)</span><br><span class="line">  case (nil, nil):</span><br><span class="line">    return true</span><br><span class="line">  default:</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上可以看出，<code>==</code>只是由实现好的静态函数决定，而<code>===</code>则是可以判断两个对象是否完全相等，这有点像判断两个指针相等一样，同样，我们要注意，如果两个可选对象都是nil，则也是<code>===</code>的；</p><ol start="3"><li>搞清楚两个问题</li></ol><ul><li><p>UTC 与 GMT<br>UTC(Coordinated Universal Time)标准时间参照，协调时间时，世界标准时间;<br>GMT(Greenwich Mean Time)时区，即格林尼治时间，位于本初子午线的标界处时间，世界计算时间和经度的起点，GMT是个时区，等同于世界时，所以GMT = UTC + 0，我们国家所在时间均以北京时间计算，北京位于东八区，所以时区为GMT + 8；</p></li><li><p>Locale<br>网上找了一圈，最后还是swift源码文档里给出的解释最靠谱：<code>Locale</code>封装了有关语言，文化和技术规范和标准的信息。由语言环境封装的信息示例包括，用于数字中小数点分隔符的符号以及格式化日期的方式。区域设置通常用于根据用户的习俗和偏好提供，格式化和解释信息。它们经常与格式化程序一起使用。虽然可以使用很多语言环境，但通常使用与当前用户关联的语言环境。<br>语言环境跟系统的环境设置有关，会涉及到操作系统语言环境设置，个人理解就是一个国际化的东西。<br>区域设置中的概念 LANGID &amp; LCID：<br><img src="https://upload-images.jianshu.io/upload_images/1429775-04ff650284a51b6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LANGID &amp; LCID"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我想你一定是在开玩笑。&lt;br&gt;源码怎么看，打开看呗！说这话的时候请收下我的轻蔑，哈哈。不过就这个问题我今天在知乎搜索了一通。不要问我为什么在知乎搜索，鬼知道知乎什么都有。&lt;br&gt;那么，请收下我的提问：&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="swift" scheme="http://charlesblog.site/tags/swift/"/>
    
      <category term="UTC" scheme="http://charlesblog.site/tags/UTC/"/>
    
  </entry>
  
  <entry>
    <title>本行三件事：猎龙 训龙 调教龙</title>
    <link href="http://charlesblog.site/2018/04/27/%E6%9C%AC%E8%A1%8C%E4%B8%89%E4%BB%B6%E4%BA%8B%EF%BC%9A%E7%8C%8E%E9%BE%99%20%E8%AE%AD%E9%BE%99%20%E8%B0%83%E6%95%99%E9%BE%99/"/>
    <id>http://charlesblog.site/2018/04/27/本行三件事：猎龙 训龙 调教龙/</id>
    <published>2018-04-27T12:45:00.000Z</published>
    <updated>2018-05-07T02:17:42.737Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是花木兰。<br><a id="more"></a></p><h2 id="第一件"><a href="#第一件" class="headerlink" title="第一件"></a>第一件</h2><p>今天在<strong>Nothing</strong>项目中添加了一个小的功能，就是按压屏幕出现一个有弹出效果的<em>Label</em>，涉及到的点；</p><ol><li>thereis</li></ol><ul><li>touches</li></ul><p>我们知道，UIResponder处理函数，根据不同的触摸状态会调用不同的函数，以下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;</span><br><span class="line"></span><br><span class="line">-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;</span><br><span class="line"></span><br><span class="line">-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;</span><br><span class="line"></span><br><span class="line">-(void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;</span><br></pre></td></tr></table></figure></p><p>注意第四个取消函数，调用时机是触摸被取消，一定要注意是被取消，自己主动点击然后结束这不叫取消，举个例子如在触摸过程中被来电打断，这种情况才算；<br>回调中可以通过<em>UITouch</em>来操作点击次数和手指数，<em>UIEvent</em>可以操作屏幕点信息，这样就把手指与屏幕的交互处理完成。</p><ul><li>transform<br>这里出现了一个现象，原代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//进入时的设置</span><br><span class="line">        //向x y轴方向平移 0 0</span><br><span class="line">        self.transform = CGAffineTransform(translationX: 0, y: 0) //(1)</span><br><span class="line">        self.transform = CGAffineTransform(rotationAngle: 0) // (2)</span><br><span class="line">        </span><br><span class="line">        self.transform = CGAffineTransform(scaleX: 0.1, y: 0.1) //(3)</span><br><span class="line">        //transform scale 改变中间不能添加其他变换</span><br><span class="line">        //动画播放</span><br><span class="line">        UIView.animate(withDuration: 0.5, delay: 0, options: .curveEaseOut, animations: &#123;</span><br><span class="line">            self.transform = CGAffineTransform(scaleX: 1, y: 1)</span><br><span class="line">        &#125;, completion: nil) //(4)</span><br></pre></td></tr></table></figure></li></ul><p>如上代码<em>(2)</em>如果放在<em>(3)</em>和<em>(4)</em>的中间，则动画会不执行，直接形成动画后的结果，天知道这其中发生了什么，怕是动画函数做了某些优化，如果你知道，还请赐教。</p><ul><li>Another Problem<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UIView.animate(withDuration: 1, delay: 0, </span><br><span class="line">usingSpringWithDamping: 0.5, </span><br><span class="line">initialSpringVelocity: 0.5, options: .curveEaseIn, animations: &#123;</span><br><span class="line">           self.transform = CGAffineTransform(scaleX: 1, y: 1)</span><br><span class="line">&#125;, completion: nil)</span><br><span class="line">// 抗阻尼 以及 弹簧 的问题</span><br><span class="line">// 涉及到了一些物理知识，不细究</span><br><span class="line">// 只是贴出这个api 注意用法</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>仿射变换</li></ol><p><a href="http://www.fuzihao.org/blog/2014/10/23/%E4%BB%BF%E5%B0%84%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2/" target="_blank" rel="noopener">仿射空间和仿射变换</a><br>关于仿射变换的先看这篇文章了解一下吧，它是计算机图形学中一个很重要的概念，简单的理解就是线性变换加上平移变换，当然看到这里你得先知道什么是线性变换和平移变换，好了，这个概念先不多说了。</p><ol start="3"><li>currying function</li></ol><p>经过了一系列的实验，最终得出了一个函数链的方案，虽然跟柯里化没有什么关系，代码如下，细细品味一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public func maybe(noDate: NODate, _ some: () -&gt; ()) -&gt; ThereIs &#123;</span><br><span class="line">        switch noDate &#123;</span><br><span class="line">        case let .April(date):</span><br><span class="line">            let myDate = date.toDate()</span><br><span class="line">            let currentDate = Date()</span><br><span class="line">            if let myDate = myDate &#123;</span><br><span class="line">                if myDate.compare(currentDate) == .orderedSame &#123;</span><br><span class="line">                    some()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return self</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其实也没有多么深奥，只是函数在调用外部传进的闭包后又返回了自身，然而，就是一个这样简单的设计，在调用时你会发现是多么的便利；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_ = thereis?.maybe(noDate: dates[0]) &#123;</span><br><span class="line">                self.noLabel.appear()</span><br><span class="line">            &#125;</span><br><span class="line">            .maybe(noDate: dates[1]) &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>上图中的<em>maybe</em>函数可以无限调用，这样根据传进来的参数可以实现一个小功能，如果将本方法的类似方法分散在不同的函数中调用，那么我们可以用传进不同参数来区分调用的时机，这样可以将某一次的逻辑调用统一在一个地方处理，说的有点绕，用一张图来理一下思路：<br><img src="https://upload-images.jianshu.io/upload_images/1429775-e58a9faeb3c885d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="maybe函数思维导图"></p><h2 id="第二件"><a href="#第二件" class="headerlink" title="第二件"></a>第二件</h2><p>此时我面前有一个作业，叫做文献综述，今天跟老铁聊天中发现自己在面对困难问题时拖延的问题。朋友说当你有一大堆的事情不知道做哪件时，挑最难的那件事情做。<br>于是把每天最棘手的问题做为首要，比方说难做的作业，比方说写一篇文章。<br><img src="http://upload-images.jianshu.io/upload_images/1429775-1aea7d4c63680f89.jpg" alt="轻课听力"><br>上图是昨晚在轻课群的口语练习，留作复习用。</p><h2 id="第三件"><a href="#第三件" class="headerlink" title="第三件"></a>第三件</h2><p>已经很久没有写日志了，这么些年断断续续的，从来没把它当作一个习惯来做。在github上看到一个学习库，有所启发，想来该培养一个习惯来让自己保持一个学习的状态。完成的并不一定要完美，完成就好，记录下心情，记录下问题，记录下昨天那个“愚蠢”的自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，我是花木兰。&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="iOS" scheme="http://charlesblog.site/tags/iOS/"/>
    
      <category term="paradigm" scheme="http://charlesblog.site/tags/paradigm/"/>
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯使用Python进行文本分类</title>
    <link href="http://charlesblog.site/2018/04/17/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BD%BF%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/"/>
    <id>http://charlesblog.site/2018/04/17/朴素贝叶斯使用Python进行文本分类/</id>
    <published>2018-04-17T15:08:00.000Z</published>
    <updated>2018-05-07T02:17:42.737Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一篇关于机器学习的文章。<br><a id="more"></a></p><ol><li>从文本中创建词向量bayes.py</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"><span class="comment">#-*-encoding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">该函数返回实验样本，该样本被切分成词条集合；</span></span><br><span class="line"><span class="string">第二个变量返回类别，该类别由人工标注，用于训练程序以便自动检查侮辱性留言；</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">postingList = [</span><br><span class="line">[<span class="string">'my'</span>,<span class="string">'dog'</span>,<span class="string">'has'</span>,<span class="string">'flea'</span>,<span class="string">'problems'</span>,<span class="string">'help'</span>,<span class="string">'please'</span>],</span><br><span class="line">[<span class="string">'maybe'</span>,<span class="string">'not'</span>,<span class="string">'take'</span>,<span class="string">'him'</span>,<span class="string">'to'</span>,<span class="string">'dog'</span>,<span class="string">'park'</span>,<span class="string">'stupid'</span>],</span><br><span class="line">[<span class="string">'my'</span>,<span class="string">'dalmation'</span>,<span class="string">'is'</span>,<span class="string">'so'</span>,<span class="string">'cute'</span>,<span class="string">'I'</span>,<span class="string">'love'</span>,<span class="string">'him'</span>],</span><br><span class="line">[<span class="string">'stop'</span>,<span class="string">'posting'</span>,<span class="string">'stupid'</span>,<span class="string">'worthless'</span>,<span class="string">'garbage'</span>],</span><br><span class="line">[<span class="string">'mr'</span>,<span class="string">'licks'</span>,<span class="string">'ate'</span>,<span class="string">'my'</span>,<span class="string">'steak'</span>,<span class="string">'how'</span>,<span class="string">'to'</span>,<span class="string">'stop'</span>,<span class="string">'him'</span>],</span><br><span class="line">[<span class="string">'quit'</span>,<span class="string">'buying'</span>,<span class="string">'worthless'</span>,<span class="string">'dog'</span>,<span class="string">'food'</span>,<span class="string">'stupid'</span>]</span><br><span class="line">]</span><br><span class="line">classVec = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>] <span class="comment"># 1代表侮辱性文字 0代表正常</span></span><br><span class="line"><span class="keyword">return</span> postingList, classVec</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createVocabList</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">vocabSet = set([])<span class="comment">#创建一个空集</span></span><br><span class="line"><span class="keyword">for</span> document <span class="keyword">in</span> dataSet:</span><br><span class="line">vocabSet = vocabSet | set(document) <span class="comment">#创建两集合并集</span></span><br><span class="line"><span class="keyword">return</span> list(vocabSet)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">该函数输入参数为词汇表及某个文档，输出的是文档向量，向量每一元素为1or0，分别表示词汇表中的单词在输入文档中是否出现</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setOfWords2Vec</span><span class="params">(vocabList, inputSet)</span>:</span></span><br><span class="line">returnVec = [<span class="number">0</span>] * len(vocabList)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> inputSet:</span><br><span class="line"><span class="keyword">if</span> word <span class="keyword">in</span> vocabList:</span><br><span class="line">returnVec[vocabList.index(word)] = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"the word: %s is not in my Vocabulary!"</span> % word)</span><br><span class="line"><span class="keyword">return</span> returnVec</span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/usiege/08jgn0fh17i3tesytmd39qsl/image_1cb7dhd105761rg11lkq1mgjpt19.png" alt="image_1cb7dhd105761rg11lkq1mgjpt19.png-132.9kB"></p><ol start="2"><li>朴素贝叶斯训练函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#朴素贝叶斯训练函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainNB0</span><span class="params">(trainMatrix, trainCategory)</span>:</span></span><br><span class="line">numTrainDocs = len(trainMatrix)</span><br><span class="line">numWords = len(trainMatrix[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">pAbusive = sum(trainCategory)/float(numTrainDocs) </span><br><span class="line"></span><br><span class="line"><span class="comment">#某词出现次数</span></span><br><span class="line">p0Num = zeros(numWords)</span><br><span class="line">p1Num = zeros(numWords)</span><br><span class="line"><span class="comment">#在所有的文档中，出现某词的文档的总词数</span></span><br><span class="line">p0Denom = <span class="number">0.0</span></span><br><span class="line">p1Denom = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(numTrainDocs):</span><br><span class="line"><span class="keyword">if</span> trainCategory[i] == <span class="number">1</span>:</span><br><span class="line">p1Num += trainMatrix[i]</span><br><span class="line">p1Denom += sum(trainMatrix[i])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p0Num += trainMatrix[i]</span><br><span class="line">p0Denom += sum(trainMatrix[i])</span><br><span class="line"></span><br><span class="line">p1Vect = p1Num/p1Denom</span><br><span class="line">p0Vect = p0Num/p0Denom</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p0Vect, p1Vect, pAbusive</span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/usiege/41wgod8054yss08dj5zcae5d/image_1cb7gr8l6tli1gq8515ev19i013.png" alt="image_1cb7gr8l6tli1gq8515ev19i013.png-368.4kB"></p><p><img src="http://static.zybuluo.com/usiege/vw73jzr2d42s7l5us6duu8d8/image_1cb7gs04bmv319kp11841cvq73i1g.png" alt="image_1cb7gs04bmv319kp11841cvq73i1g.png-125.3kB"></p><ol start="3"><li>修改分类器</li></ol><ul><li>Problem1:计算多个概率的乘积以获得文档属于某个类别概率，如果其中有一个概率值为0，那最后乘积也为0；为降低这种影响，可以将所有词出现初始化为1，并将分母初始化为2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p0Num = ones(numWords); </span><br><span class="line">p1Num = ones(numWords)</span><br><span class="line">p0Denom = <span class="number">2.0</span>;</span><br><span class="line">p1Denom = <span class="number">2.0</span></span><br></pre></td></tr></table></figure><ul><li>Problem2: 下溢出，太多很小的数相乘会造成下溢出，解决办法是取自然对数，把乘法转换成加法，通过求对数避免下溢出或者浮点数舍入导致错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p1Vect = log(p1Num/p1Denom)</span><br><span class="line">p0Vect = log(p0Num/p0Denom)</span><br></pre></td></tr></table></figure><ol start="4"><li>分类器编写</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建朴素贝叶斯分类函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classityNB</span><span class="params">(vec2Classify, p0Vec, p1Vec, pClass1)</span>:</span></span><br><span class="line">p1 = sum(vec2Classify * p1Vec) + log(pClass1)</span><br><span class="line">p0 = sum(vec2Classify * p0Vec) + log(<span class="number">1.0</span> - pClass1)</span><br><span class="line"><span class="keyword">if</span> p1 &gt; p0: </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testingNB</span><span class="params">()</span>:</span></span><br><span class="line">listOPosts, listClasses = loadDataSet()</span><br><span class="line">myVocabList = createVocabList(listOPosts)</span><br><span class="line">trainMat = []</span><br><span class="line"><span class="keyword">for</span> postinDoc <span class="keyword">in</span> listOPosts:</span><br><span class="line">trainMat.append(setOfWords2Vec(myVocabList, postinDoc))</span><br><span class="line">p0V, p1V, pAb = trainNB0(array(trainMat), array(listClasses))</span><br><span class="line"></span><br><span class="line">testEntry = [<span class="string">'love'</span>, <span class="string">'my'</span>, <span class="string">'dalmation'</span>]</span><br><span class="line">thisDoc = array(setOfWords2Vec(myVocabList, testEntry))</span><br><span class="line">print(testEntry, <span class="string">'classified as:'</span>, classityNB(thisDoc, p0V, p1V, pAb))</span><br><span class="line"></span><br><span class="line">testEntry = [<span class="string">'stupid'</span>, <span class="string">'garbage'</span>]</span><br><span class="line">thisDoc = array(setOfWords2Vec(myVocabList, testEntry))</span><br><span class="line">print(testEntry, <span class="string">'classified as:'</span>, classityNB(thisDoc, p0V, p1V, pAb))</span><br></pre></td></tr></table></figure><p>通过训练器分类得出结果：<br><img src="http://static.zybuluo.com/usiege/qfnldhvk83es60qqfapx4kn4/image_1cba21hoeuca2kt17n5bdu3e9p.png" alt="image_1cba21hoeuca2kt17n5bdu3e9p.png-38.4kB"></p><ol start="5"><li>文档词袋模型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文档词袋模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bagofWords2VecMN</span><span class="params">(vocabList, inputSet)</span>:</span></span><br><span class="line">returnVec = [<span class="number">0</span>] * len(vocabList)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> inputSet:</span><br><span class="line"><span class="keyword">if</span> word <span class="keyword">in</span> vocabList:</span><br><span class="line">returnVec[vocabList.index(word)] += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> returnVec</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一篇关于机器学习的文章。&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="Python" scheme="http://charlesblog.site/tags/Python/"/>
    
      <category term="Mechine-Learning" scheme="http://charlesblog.site/tags/Mechine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>MGJRouter代码分析</title>
    <link href="http://charlesblog.site/2018/01/07/MGJRouter%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://charlesblog.site/2018/01/07/MGJRouter代码分析/</id>
    <published>2018-01-07T09:21:00.000Z</published>
    <updated>2018-05-07T02:17:42.730Z</updated>
    
    <content type="html"><![CDATA[<p>今天来聊聊组件化，之前一直听说大厂在搞，什么淘宝架构，什么蘑菇街，既然谈到了架构的问题，那必属重中之重。接下来分析一下蘑菇街开源的代码，自己做个总结。<br><a id="more"></a></p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>类书本的文章个人感觉还是写不来的，再搬到自己写的东西这来也不合适，所以直接上一链接，通过链接文章大致可了解下它的前身后世，产生原因，以及整体宏观架构设计，而我接下来要做的是细化，以及转化，便于自己吸收<br>———&gt; <a href="https://www.jianshu.com/p/67a6004f6930" target="_blank" rel="noopener">组件化架构漫谈</a></p><ol><li>话不多说，先看入口：</li></ol><p><img src="http://static.zybuluo.com/usiege/f0dci325k3jmmrh2l9uy51s4/image_1c25qj3m5ejq111g1v5lvkgjek9.png" alt="image_1c25qj3m5ejq111g1v5lvkgjek9.png-7.7kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@interface MGJRouter ()</span><br><span class="line">/**</span><br><span class="line"> *  保存了所有已注册的 URL</span><br><span class="line"> *  结构类似 @&#123;@&quot;beauty&quot;: @&#123;@&quot;:id&quot;: &#123;@&quot;_&quot;, [block copy]&#125;&#125;&#125;</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic) NSMutableDictionary *routes;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">+ (instancetype)sharedInstance</span><br><span class="line">&#123;</span><br><span class="line">    static MGJRouter *instance = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [[self alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显，蘑菇街架构（以下简称MGJ）通过该单例作管理，统一进行调配，而该单例仅有一个变量，就是<strong>routes</strong>，实际上它仅仅是管理了一个字典的结构，具体字典内有哪些内容，我们慢慢看；</p><ol start="2"><li>回调Block的定义</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  routerParameters 里内置的几个参数会用到上面定义的 string</span><br><span class="line"> */</span><br><span class="line">typedef void (^MGJRouterHandler)(NSDictionary *routerParameters);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  需要返回一个 object，配合 objectForURL: 使用</span><br><span class="line"> */</span><br><span class="line">typedef id (^MGJRouterObjectHandler)(NSDictionary *routerParameters);</span><br></pre></td></tr></table></figure><p>上面这两个block定义是MGJ注册URL的回调，一个带返回值，另一个不带，在这里我们说一下<strong>带返回值的block用法</strong>；如下举例 ——&gt;<br><img src="http://static.zybuluo.com/usiege/xn1r7ergmr6xr6msy2p5tyrh/WX20180107-134538@2x.png" alt="WX20180107-134538@2x.png-37.5kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//声明</span><br><span class="line">typedef UIViewController *(^ViewControllerHandler)();</span><br><span class="line"></span><br><span class="line">//作参数</span><br><span class="line">@interface DemoListViewController : UIViewController</span><br><span class="line">+ (void)registerWithTitle:(NSString *)title handler:(ViewControllerHandler)handler;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//定义</span><br><span class="line">@implementation DemoListViewController</span><br><span class="line">+ (void)registerWithTitle:(NSString *)title handler:(ViewControllerHandler)handler</span><br><span class="line">&#123;</span><br><span class="line">    UIViewController* vc = handler()</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//在别处调用</span><br><span class="line">@implementation DemoDetailViewController</span><br><span class="line">[DemoListViewController registerWithTitle:@&quot;基本使用&quot; handler:^UIViewController *&#123;</span><br><span class="line">        return DemoDetailViewController();</span><br><span class="line">&#125;];</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>如上，我们把<code>ViewControllerHandler</code>的运行延迟到了实际调用的时刻，并且我们可以在这个handler的实现中带入很多信息；</p><ol start="3"><li>MGJ数据结构管理</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extern NSString *const MGJRouterParameterURL;</span><br><span class="line">extern NSString *const MGJRouterParameterCompletion;</span><br><span class="line">extern NSString *const MGJRouterParameterUserInfo;</span><br><span class="line">//*************************************************</span><br><span class="line">static NSString * const MGJ_ROUTER_WILDCARD_CHARACTER = @&quot;~&quot;;  //这是一个占位符</span><br><span class="line">static NSString *specialCharacters = @&quot;/?&amp;.&quot;;</span><br><span class="line"></span><br><span class="line">NSString *const MGJRouterParameterURL = @&quot;MGJRouterParameterURL&quot;;</span><br><span class="line">NSString *const MGJRouterParameterCompletion = @&quot;MGJRouterParameterCompletion&quot;;</span><br><span class="line">NSString *const MGJRouterParameterUserInfo = @&quot;MGJRouterParameterUserInfo&quot;;</span><br></pre></td></tr></table></figure><p>从这里我们可以看出，MGJ的路由管理，实际上是一个解析url以及对应的管理，我们举几个URL来看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@&quot;mgj://&quot;</span><br><span class="line">@&quot;mgj://foo/bar/none/exists&quot;</span><br><span class="line">@&quot;mgj://foo/bar&quot; </span><br><span class="line">@&quot;mgj://category/家居&quot;</span><br><span class="line">@&quot;mgj://category/travel&quot;</span><br><span class="line">@&quot;mgj://search/:query&quot;</span><br><span class="line">@&quot;mgj://detail&quot;</span><br><span class="line">@&quot;mgj://search/:keyword&quot;</span><br><span class="line">@&quot;mgj://search_top_bar&quot;</span><br></pre></td></tr></table></figure></p><p>通过上面的URL我们可以看出，路由的管理实际上就是url的解析过程，下面我们来具体看一下解析过程；</p><ol start="4"><li>URL解析</li></ol><ul><li>route url</li></ul><p><img src="http://static.zybuluo.com/usiege/wr5j4jwfcaov7yfmx3u82nyk/WX20180107-150437@2x.png" alt="WX20180107-150437@2x.png-59.1kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (NSArray*)pathComponentsFromURL:(NSString*)URL</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableArray *pathComponents = [NSMutableArray array];</span><br><span class="line">    if ([URL rangeOfString:@&quot;://&quot;].location != NSNotFound) &#123;</span><br><span class="line">        NSArray *pathSegments = [URL componentsSeparatedByString:@&quot;://&quot;];</span><br><span class="line">        // 如果 URL 包含协议，那么把协议作为第一个元素放进去</span><br><span class="line">        [pathComponents addObject:pathSegments[0]];</span><br><span class="line">        </span><br><span class="line">        // 如果只有协议，那么放一个占位符</span><br><span class="line">        URL = pathSegments.lastObject;</span><br><span class="line">        if (!URL.length) &#123;</span><br><span class="line">            [pathComponents addObject:MGJ_ROUTER_WILDCARD_CHARACTER];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (NSString *pathComponent in [[NSURL URLWithString:URL] pathComponents]) &#123;</span><br><span class="line">        if ([pathComponent isEqualToString:@&quot;/&quot;]) continue;</span><br><span class="line">        if ([[pathComponent substringToIndex:1] isEqualToString:@&quot;?&quot;]) break;</span><br><span class="line">        [pathComponents addObject:pathComponent];</span><br><span class="line">    &#125;</span><br><span class="line">    return [pathComponents copy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>key-value<br><img src="http://static.zybuluo.com/usiege/j23e7t541u0wcoohza0ktqmb/WX20180107-151956@2x.png" alt="WX20180107-151956@2x.png-111.8kB"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (NSMutableDictionary *)addURLPattern:(NSString *)URLPattern</span><br><span class="line">&#123;</span><br><span class="line">    NSArray *pathComponents = [self pathComponentsFromURL:URLPattern];</span><br><span class="line"></span><br><span class="line">    NSMutableDictionary* subRoutes = self.routes;</span><br><span class="line">    </span><br><span class="line">    for (NSString* pathComponent in pathComponents) &#123;</span><br><span class="line">        if (![subRoutes objectForKey:pathComponent]) &#123;</span><br><span class="line">            subRoutes[pathComponent] = [[NSMutableDictionary alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">        subRoutes = subRoutes[pathComponent];</span><br><span class="line">    &#125;</span><br><span class="line">    return subRoutes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>核心url解析</p></li></ul><p><img src="http://static.zybuluo.com/usiege/cbn7v2xkwlfy3c19m322o7mg/WX20180107-160319@2x.png" alt="WX20180107-160319@2x.png-147.8kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">- (NSMutableDictionary *)extractParametersFromURL:(NSString *)url</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableDictionary* parameters = [NSMutableDictionary dictionary];</span><br><span class="line">    </span><br><span class="line">    parameters[MGJRouterParameterURL] = url;</span><br><span class="line">    </span><br><span class="line">    NSMutableDictionary* subRoutes = self.routes;</span><br><span class="line">    NSArray* pathComponents = [self pathComponentsFromURL:url];</span><br><span class="line">    </span><br><span class="line">    BOOL found = NO;</span><br><span class="line">    // borrowed from HHRouter(https://github.com/Huohua/HHRouter)</span><br><span class="line">    for (NSString* pathComponent in pathComponents) &#123;</span><br><span class="line">        </span><br><span class="line">        // 对 key 进行排序，这样可以把 ~ 放到最后</span><br><span class="line">        NSArray *subRoutesKeys =[subRoutes.allKeys sortedArrayUsingComparator:^NSComparisonResult(NSString *obj1, NSString *obj2) &#123;</span><br><span class="line">            return [obj1 compare:obj2];</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        for (NSString* key in subRoutesKeys) &#123;</span><br><span class="line">            if ([key isEqualToString:pathComponent] || [key isEqualToString:MGJ_ROUTER_WILDCARD_CHARACTER]) &#123;</span><br><span class="line">                found = YES;</span><br><span class="line">                subRoutes = subRoutes[key];</span><br><span class="line">                break;</span><br><span class="line">            &#125; else if ([key hasPrefix:@&quot;:&quot;]) &#123;</span><br><span class="line">                found = YES;</span><br><span class="line">                subRoutes = subRoutes[key];</span><br><span class="line">                NSString *newKey = [key substringFromIndex:1];</span><br><span class="line">                NSString *newPathComponent = pathComponent;</span><br><span class="line">                // 再做一下特殊处理，比如 :id.html -&gt; :id</span><br><span class="line">                if ([self.class checkIfContainsSpecialCharacter:key]) &#123;</span><br><span class="line">                    NSCharacterSet *specialCharacterSet = [NSCharacterSet characterSetWithCharactersInString:specialCharacters];</span><br><span class="line">                    NSRange range = [key rangeOfCharacterFromSet:specialCharacterSet];</span><br><span class="line">                    if (range.location != NSNotFound) &#123;</span><br><span class="line">                        // 把 pathComponent 后面的部分也去掉</span><br><span class="line">                        newKey = [newKey substringToIndex:range.location - 1];</span><br><span class="line">                        NSString *suffixToStrip = [key substringFromIndex:range.location];</span><br><span class="line">                        newPathComponent = [newPathComponent stringByReplacingOccurrencesOfString:suffixToStrip withString:@&quot;&quot;];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                parameters[newKey] = newPathComponent;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 如果没有找到该 pathComponent 对应的 handler，则以上一层的 handler 作为 fallback</span><br><span class="line">        if (!found &amp;&amp; !subRoutes[@&quot;_&quot;]) &#123;</span><br><span class="line">            return nil;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Extract Params From Query.</span><br><span class="line">    NSArray&lt;NSURLQueryItem *&gt; *queryItems = [[NSURLComponents alloc] initWithURL:[[NSURL alloc] initWithString:url] resolvingAgainstBaseURL:false].queryItems;</span><br><span class="line">    </span><br><span class="line">    for (NSURLQueryItem *item in queryItems) &#123;</span><br><span class="line">        parameters[item.name] = item.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (subRoutes[@&quot;_&quot;]) &#123;</span><br><span class="line">        parameters[@&quot;block&quot;] = [subRoutes[@&quot;_&quot;] copy];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return parameters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">+ (void)openURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo completion:(void (^)(id result))completion</span><br><span class="line">&#123;</span><br><span class="line">    URL = [URL stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    NSMutableDictionary *parameters = [[self sharedInstance] extractParametersFromURL:URL];</span><br><span class="line">    </span><br><span class="line">    [parameters enumerateKeysAndObjectsUsingBlock:^(id key, NSString *obj, BOOL *stop) &#123;</span><br><span class="line">        if ([obj isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">            parameters[key] = [obj stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    if (parameters) &#123;</span><br><span class="line">        MGJRouterHandler handler = parameters[@&quot;block&quot;];</span><br><span class="line">        if (completion) &#123;</span><br><span class="line">            parameters[MGJRouterParameterCompletion] = completion;</span><br><span class="line">        &#125;</span><br><span class="line">        if (userInfo) &#123;</span><br><span class="line">            parameters[MGJRouterParameterUserInfo] = userInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        //所以注册路由时的回调是在这里才调用到的</span><br><span class="line">        //也就是openURL响应了register的回调</span><br><span class="line">        if (handler) &#123;</span><br><span class="line">            [parameters removeObjectForKey:@&quot;block&quot;];</span><br><span class="line">            handler(parameters);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>后续？</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来聊聊组件化，之前一直听说大厂在搞，什么淘宝架构，什么蘑菇街，既然谈到了架构的问题，那必属重中之重。接下来分析一下蘑菇街开源的代码，自己做个总结。&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="iOS" scheme="http://charlesblog.site/tags/iOS/"/>
    
      <category term="modularization" scheme="http://charlesblog.site/tags/modularization/"/>
    
  </entry>
  
  <entry>
    <title>Swift Currying(柯里化)</title>
    <link href="http://charlesblog.site/2018/01/06/Swift%20Currying%EF%BC%88%E6%9F%AF%E9%87%8C%E5%8C%96%EF%BC%89/"/>
    <id>http://charlesblog.site/2018/01/06/Swift Currying（柯里化）/</id>
    <published>2018-01-06T08:34:00.000Z</published>
    <updated>2018-05-07T02:17:42.732Z</updated>
    
    <content type="html"><![CDATA[<p>Currying<br><a id="more"></a></p><ol><li>函数式编程思想</li></ol><p>先举一个小例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">func addOne(count: Int) -&gt; Int &#123;</span><br><span class="line">    return count + 1</span><br><span class="line">&#125;</span><br><span class="line">//上面这个代码我们是返回一个加和，和是使参数增加1；</span><br><span class="line">//一个更加灵活的方法，我们可以取消上面的硬编码1；</span><br><span class="line"></span><br><span class="line">func add(count: Int, addition: Int) -&gt; Int &#123;</span><br><span class="line">    return count + addition</span><br><span class="line">&#125;</span><br><span class="line">//然而这个函数还并不是那么友好，我们用另外一种方法实现看一下：</span><br><span class="line">func add(_ addition: Int) -&gt; (Int) -&gt; Int &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        count in </span><br><span class="line">        return count + addition</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用一下以上方法，看看有什么区别：</span><br><span class="line">let number = add(count: 10, addition: 2)    //函数2</span><br><span class="line"></span><br><span class="line">let add2 = add(2)           //函数3</span><br><span class="line">let number = add2(10)</span><br><span class="line"></span><br><span class="line">let number = add(2)(10)     //函数3调用连起来是</span><br><span class="line">//是不是觉得这种调用方式很熟悉，有点类似于</span><br><span class="line">//classname.property.subproperty，点语法链</span><br></pre></td></tr></table></figure></p><p>显然这种编程方式更加灵活，所展现的内容更加直观，可以减少函数写N多的参数；当然函数式编程有的可不只是这些，更多内容不在本篇所讨论之内；</p><p>基于上例我们来写一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func greaterThan(_ comparer: Int) -&gt; (Int) -&gt; Bool &#123;</span><br><span class="line">    return &#123; $0 &gt; comparer &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let compareResult = greaterThan(10)(11)</span><br></pre></td></tr></table></figure></p><p>很明显下面这个式子的调用直观的表达了参数10和参数11的大小；</p><ol start="2"><li>target-action例子</li></ol><p>我们来看国外网上的一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">protocol TargetAction &#123;</span><br><span class="line">    func performAction()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct TargetActionWrapper&lt;T: AnyObject&gt;: TargetAction &#123;</span><br><span class="line">    weak var target: T?</span><br><span class="line">    let action: (T) -&gt; () -&gt; (Void)</span><br><span class="line">    </span><br><span class="line">    func performAction() -&gt; (Void) &#123;</span><br><span class="line">        if let t = target &#123;</span><br><span class="line">            action(t)()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">enum ControlEvent &#123;</span><br><span class="line">    case TouchUpInside</span><br><span class="line">    case ValueChanged</span><br><span class="line">    // ...</span><br><span class="line">&#125;              </span><br><span class="line"></span><br><span class="line">class Control &#123;</span><br><span class="line"></span><br><span class="line">    var actions = [ControlEvent: TargetAction]()</span><br><span class="line">    </span><br><span class="line">    convenience init&lt;T: AnyObject&gt;(_ target: T, action: @escaping (T) -&gt; () -&gt; (Void), controlEvent: ControlEvent) &#123;</span><br><span class="line">        actions[controlEvent] = TargetActionWrapper(</span><br><span class="line">            target: target, action: action)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func setTarget&lt;T: AnyObject&gt;(target: T, action: @escaping (T) -&gt; () -&gt; (Void), controlEvent: ControlEvent) &#123;</span><br><span class="line">            </span><br><span class="line">            actions[controlEvent] = TargetActionWrapper(target: target, action: action)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func removeTargetForControlEvent(controlEvent: ControlEvent) &#123;</span><br><span class="line">        actions[controlEvent] = nil</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func performActionForControlEvent(controlEvent: ControlEvent) &#123;</span><br><span class="line">        actions[controlEvent]?.performAction()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//我们来使用一下我们的模板</span><br><span class="line"></span><br><span class="line">func viewDidLoad() &#123;</span><br><span class="line">    Control().setTarget(self, action: ViewController.tapAction, controlEvent: .touchUpInside)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func tapAction() &#123;</span><br><span class="line">    print(&quot;单击了&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//如果我们不是用实例方法调用而是自定义构造函数的话</span><br><span class="line">//我们能看到更好的表现方式</span><br><span class="line"></span><br><span class="line">func viewDidLoad() &#123;</span><br><span class="line">    Control.init(self, action: ViewController.tapAction controlEvent: .touchUpInside)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//当然这个便利构造函数的例子用在这里并不是很合逻辑，但是我们只是想展现一下柯里化的内容</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Currying&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="swift" scheme="http://charlesblog.site/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 构建之脚本篇</title>
    <link href="http://charlesblog.site/2017/12/12/Jenkins%20%E6%9E%84%E5%BB%BA%E4%B9%8B%E8%84%9A%E6%9C%AC%E7%AF%87/"/>
    <id>http://charlesblog.site/2017/12/12/Jenkins 构建之脚本篇/</id>
    <published>2017-12-12T12:53:00.000Z</published>
    <updated>2018-05-07T02:17:42.730Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直纠结Xcode 9之后用Jenkins导出.ipa文件失败，后经朋友指点终于成功，在此结出终级解决之法；<br><a id="more"></a></p><p>大致思路是这样的：Jenkins在网页中的配置大多会在之后进行整理，最终在终端生成shell脚本，然后每完成一项就会在构建结果中显示成功，如有一步错，则整个构建过程将会失败，所以这就解释了之前构建一直卡在了Achiver成功之后。</p><p>基于上面的思路，则弃用之前的Jenkins配置，取消Jenkins项目中构建过程，Xcode配置全部清空，使用脚本配置，以下我会具体贴出，并适当讲解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash -l</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">export LANGUAGE=en_US.UTF-8</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line"></span><br><span class="line">#以下PROJECT_NAME为项目工程名称</span><br><span class="line">pod install --verbose --no-repo-update</span><br><span class="line">open PROJECT_NAME.xcworkspace</span><br><span class="line"></span><br><span class="line">#以下USER_NAME为用户名</span><br><span class="line">project_path=&quot;/Users/USER_NAME/.jenkins/workspace/PROJECT_NAME&quot;</span><br><span class="line"></span><br><span class="line">#指定项目地址</span><br><span class="line">workspace_path=&quot;$project_path/PROJECT_NAME.xcworkspace&quot;</span><br><span class="line"></span><br><span class="line">#取当前时间字符串添加到文件夹结尾</span><br><span class="line">now=$(date +&quot;%Y_%m_%d_%H_%M_%S&quot;)</span><br><span class="line"></span><br><span class="line">#指定项目的scheme名称</span><br><span class="line">scheme=&quot;PROJECT_NAME&quot;</span><br><span class="line">#指定要打包的配置名</span><br><span class="line">configuration=&quot;Release&quot;</span><br><span class="line">#指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id，即xcodebuild的method参数</span><br><span class="line">export_method=&apos;enterprise&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定输出路径</span><br><span class="line">output_path=&quot;$project_path/build/PROJECT_NAME&#123;now&#125;&quot;</span><br><span class="line">#指定输出归档文件地址</span><br><span class="line">archive_path=&quot;$output_path/PROJECT_NAME.xcarchive&quot;</span><br><span class="line">#指定输出ipa名称</span><br><span class="line">ipa_name=&quot;PROJECT_NAME&#123;now&#125;.ipa&quot;</span><br><span class="line"></span><br><span class="line">#指定输出ipa地址</span><br><span class="line">ipa_path=&quot;$output_path/$&#123;ipa_name&#125;&quot;</span><br><span class="line">#指定打包配置</span><br><span class="line">export_plist_path=&quot;$project_path/ExportOptions.plist&quot;</span><br><span class="line">#获取执行命令时的commit message</span><br><span class="line">#commit_msg=&quot;$(cat $project_path/build_log.txt)&quot;</span><br><span class="line"></span><br><span class="line">#输出设定的变量值</span><br><span class="line">echo &quot;===workspace path: $&#123;workspace_path&#125;===&quot;</span><br><span class="line">echo &quot;===archive path: $&#123;archive_path&#125;===&quot;</span><br><span class="line">echo &quot;===ipa path: $&#123;ipa_path&#125;===&quot;</span><br><span class="line">echo &quot;===export method: $&#123;export_method&#125;===&quot;</span><br><span class="line">#echo &quot;===commit msg: $&#123;commit_msg&#125;===&quot;</span><br><span class="line"></span><br><span class="line">#先清空前一次build</span><br><span class="line">xcodebuild clean -workspace $&#123;workspace_path&#125; -scheme $&#123;scheme&#125; -configuration $&#123;configuration&#125;</span><br><span class="line"></span><br><span class="line">#归档</span><br><span class="line">xcodebuild archive -workspace $&#123;workspace_path&#125; -scheme $&#123;scheme&#125; -archivePath $&#123;archive_path&#125;</span><br><span class="line"></span><br><span class="line">#导出</span><br><span class="line">xcodebuild -exportArchive -archivePath $&#123;archive_path&#125; -exportPath $&#123;output_path&#125; -exportOptionsPlist $&#123;export_plist_path&#125;</span><br></pre></td></tr></table></figure><p>依此上秘法，会获得Xcode 9下构建成功之案例，.ipa文件也会导出，至于之后上传到平台上，请到各平台下自行找文档整理，不做赘述。</p><p>今天新年，祝大家新年快乐，2018，代码不出bug，新技术很快上手，妹子泡到手软，工资涨的飞快，人生乐的飞起！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直纠结Xcode 9之后用Jenkins导出.ipa文件失败，后经朋友指点终于成功，在此结出终级解决之法；&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="jenkins" scheme="http://charlesblog.site/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 100次构建失败踩坑全录（二）</title>
    <link href="http://charlesblog.site/2017/12/10/Jenkins%20100%E6%AC%A1%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5%E8%B8%A9%E5%9D%91%E5%85%A8%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://charlesblog.site/2017/12/10/Jenkins 100次构建失败踩坑全录（二）/</id>
    <published>2017-12-10T12:53:00.000Z</published>
    <updated>2018-05-07T02:17:42.729Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇，继续踩坑，下面到构建触发器环节：<br><a id="more"></a></p><ul><li><p>构建触发器<br><img src="http://static.zybuluo.com/usiege/it14w81rja3zme63xykjxy5o/image_1c0qnmug31v0hvkf1pp1kqf1bir9.png" alt="image_1c0qnmug31v0hvkf1pp1kqf1bir9.png-91.5kB"><br>能用到的发图所示，说明在下方，自行研究，需要注意的一点是图中的*号之间是有空格的；</p></li><li><p>构建环境<br>这里又有一个超时，与上面的无关，这个是构建过程中的，根据需要添加，下面那个选项是时间戳；<br><img src="http://static.zybuluo.com/usiege/pjeg3kt1s3cb0rxb2l1dfsfr/image_1c0qooi0dkg7ls9abefu71n77p.png" alt="image_1c0qooi0dkg7ls9abefu71n77p.png-38.6kB"></p></li></ul><p>接下来是Keychains和Mobile PP，必填项；<br><img src="http://static.zybuluo.com/usiege/cjtc66sg8991c5ulj3uib8dq/image_1c0qosdhm132q23k103kckp1dok16.png" alt="image_1c0qosdhm132q23k103kckp1dok16.png-8kB"></p><p>逐个击破：<br>Keychains部分<br><img src="http://static.zybuluo.com/usiege/li5lfp7spsd6c3bw435besbb/image_1c0qovfpn1n431vc7n8qonb8o51j.png" alt="image_1c0qovfpn1n431vc7n8qonb8o51j.png-83.2kB"><br>这个部分也是选择题，因为之前你已经上传了，但是这里会出现无法选择的bug，点保存刷新下页面就可以选了，Variables部分填如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;KEYCHAIN_PATH&#125; $&#123;KEYCHAIN_PASSWORD&#125; $&#123;CODE_SIGNING_IDENTITY&#125;</span><br></pre></td></tr></table></figure></p><p>Mobile Provisioning Profiles部分<br><img src="http://static.zybuluo.com/usiege/1s0il4bxtsop1ame15pbq0ul/image_1c0qprhce18lu1vjb1pd1aakjv20.png" alt="image_1c0qprhce18lu1vjb1pd1aakjv20.png-47.6kB"><br>这个部分同上，请选择你确定的PP文件，一定要对应好：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PROVISIONING_PROFILE&#125;</span><br></pre></td></tr></table></figure></p><ul><li>构建</li></ul><p>整个配置过程最重要的部分，大多数问题都出在这里，我这里目前到了Archive阶段，也就是说归档成功，然后归档结果可以用xcode进行ipa打包，具体打包还要设置一个shell脚本，网上好多，有的可以用有的不可以，所以打算研究下这个脚本，自己写一个再上传，之后会在博客中跟进，现在先继续把已完成的部分写下来；</p><p>首先是先要加一个结束后的脚本，这个脚本不做打包操作，只是设置一下环境，以及配置一下有pod依赖的情况，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash -l</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">export LANGUAGE=en_US.UTF-8</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line"></span><br><span class="line">pod install --verbose --no-repo-update</span><br><span class="line">open LeWaiJiao.xcworkspace</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/usiege/rxby0iwous3ppc63wyn1c83y/image_1c0qqc2ubcfq5tvuui19m3oi89.png" alt="image_1c0qqc2ubcfq5tvuui19m3oi89.png-47.4kB"></p><p>下面的那个<strong>Pack application,build and sign</strong> .ipa项就是打ipa的功能，暂时没有搞通，后续会补上来，先跳过；</p><p><img src="http://static.zybuluo.com/usiege/eceobb4arpah1xacmv2lmxrr/image_1c0qqnucp1np81vaj3rs1l7p1otdm.png" alt="image_1c0qqnucp1np81vaj3rs1l7p1otdm.png-97.4kB"></p><p><strong>Code signing &amp; OS X keychain options</strong></p><p>下面的bundleID是你要进行打包的bundleID，info.plist是workspace下的路径，注意一下下面的Development Team ID这个ID是你的钥匙串上的证书名称，后面括号里的那一串字符，由字母和数字组成的，需要你自己做对应，下面的照着抄就行了，password填你电脑用户的密码，不要填错了；</p><p><img src="http://static.zybuluo.com/usiege/xhxhseh11fwg4wnbt8gpj95y/image_1c0qr7dli1unv1s7s1vu2ugm1fuh13.png" alt="image_1c0qr7dli1unv1s7s1vu2ugm1fuh13.png-102.7kB"></p><h1 id="贴几个Error："><a href="#贴几个Error：" class="headerlink" title="贴几个Error："></a>贴几个Error：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code Signing Error: Code signing is required for product type &apos;Application&apos; in SDK &apos;iOS 11.1&apos;</span><br></pre></td></tr></table></figure><p>需要你在xcode中设置，然后上传到你们的Git服务器再构建：<br><img src="http://static.zybuluo.com/usiege/r85b8hxub85tfinbuzue1svp/image_1c0qs83ul1baipc04otg331geb1g.png" alt="image_1c0qs83ul1baipc04otg331geb1g.png-35.4kB"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No global development team or local team ID was configured.</span><br></pre></td></tr></table></figure><p>就是之前说的<strong>Development Team ID</strong>部分，填了就解决了；<br><a href="http://www.jianshu.com/p/8b2fc2da0466" target="_blank" rel="noopener">http://www.jianshu.com/p/8b2fc2da0466</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild: error: The flag -scheme is required when specifying -archivePath but not -exportArchive.</span><br></pre></td></tr></table></figure><p>这个问题也是个大坑，找了好久，也是搜狗找到的：<br><a href="http://www.jianshu.com/p/8967e4e27e9b" target="_blank" rel="noopener">http://www.jianshu.com/p/8967e4e27e9b</a><br><a href="https://www.tuicool.com/articles/zQ73Q3Q" target="_blank" rel="noopener">https://www.tuicool.com/articles/zQ73Q3Q</a><br><a href="https://github.com/jenkinsci/clang-scanbuild-plugin/commit/b970f5280a9c1929e9cd9d3b4d2b76a7d6cbc0dc" target="_blank" rel="noopener">https://github.com/jenkinsci/clang-scanbuild-plugin/commit/b970f5280a9c1929e9cd9d3b4d2b76a7d6cbc0dc</a></p><p>解决方法最直接的就是指定scheme和xcode workspace file，分别填你xcode工程中的scheme和pod生成的xcworkspace的名字；<br><img src="http://static.zybuluo.com/usiege/tlotqzvjbjlqk2ms1u43w2yd/image_1c0r0aqt33tdthopme188a2kk1t.png" alt="image_1c0r0aqt33tdthopme188a2kk1t.png-87.3kB"></p><p>有些同学不知道scheme在什么地方，如下图所示：<br><img src="http://static.zybuluo.com/usiege/1y4937ijhbvifle7jfgjg3ac/image_1c0r0eai5f09qj47rs134c1upu2a.png" alt="image_1c0r0eai5f09qj47rs134c1upu2a.png-145.6kB"></p><p>如上，能保证构建可以成功在Archive过程完成，如遇其他问题，欢迎评论区讨论；<br>之后会再继续完成打包ipa以及上传平台，同时之前提过的SSH部分会持续跟近，因为SSH与本文所讨论的内容并不十分吻合，所以这里不作讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上篇，继续踩坑，下面到构建触发器环节：&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="jenkins" scheme="http://charlesblog.site/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 100次构建失败踩坑全录（一）</title>
    <link href="http://charlesblog.site/2017/12/09/Jenkins%20100%E6%AC%A1%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5%E8%B8%A9%E5%9D%91%E5%85%A8%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://charlesblog.site/2017/12/09/Jenkins 100次构建失败踩坑全录（一）/</id>
    <published>2017-12-09T12:53:00.000Z</published>
    <updated>2018-05-07T02:17:42.729Z</updated>
    
    <content type="html"><![CDATA[<p>本文将以问题与解决方案的方式对Jenkins构建过程中的问题进行收录，后期会在评论中持续收集，如果有相同情况，请自行对照解决；<br><a id="more"></a></p><p>本文参考：<br>手把手教你利用Jenkins持续集成iOS项目<br><a href="http://www.jianshu.com/p/41ecb06ae95f" target="_blank" rel="noopener">http://www.jianshu.com/p/41ecb06ae95f</a><br>关于iOS-Jenkins进行持续集成项目部署<br><a href="http://www.jianshu.com/p/54c7daae6c94" target="_blank" rel="noopener">http://www.jianshu.com/p/54c7daae6c94</a><br>iOS持续集成：Jenkins篇<br><a href="http://www.jianshu.com/p/faf879b3d182" target="_blank" rel="noopener">http://www.jianshu.com/p/faf879b3d182</a></p><h2 id="关卡1-："><a href="#关卡1-：" class="headerlink" title="关卡1 ："></a>关卡1 ：</h2><p>安装Jenkins：首先你的电脑得有一个Java环境，接下来安装Jenkins。你可以直接去<a href="https://jenkins.io" target="_blank" rel="noopener">Jenkins入口</a>网站，查看安装方式；<br>当然你也可以使用以下方法：</p><ul><li><p>安装homebrew</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li><li><p>安装jenkins</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install jenkins</span><br></pre></td></tr></table></figure></li></ul><p>安装成功后需要开启jenkins服务；</p><h2 id="关卡2-："><a href="#关卡2-：" class="headerlink" title="关卡2 ："></a>关卡2 ：</h2><p>开启Jenkins服务：确认jenkins已安装，在终端进入到jenkins安装目录下，会有一个叫做jenkins.war的文件，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar jenkins.war</span><br></pre></td></tr></table></figure></p><p>或者在终端输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenkins</span><br></pre></td></tr></table></figure></p><p>当出现：<br><img src="http://static.zybuluo.com/usiege/uowhxmph61xngu3l2t4hxamh/image_1c0ptnl2j13mh1mn2hmk18qf7usp.png" alt="image_1c0ptnl2j13mh1mn2hmk18qf7usp.png-188.1kB"></p><p>服务已经就位，可以开始进行配置了；</p><p>这里还有两个命令用于jenkins开启和停用（Mac上）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br><span class="line">$ sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure></p><p>如果是linux上也可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status jenkins.service</span><br><span class="line">$ sudo systemctl start jenkins.service</span><br></pre></td></tr></table></figure></p><p>不过实际操作过程中，可能会出现停用失败的情况，我的做法是直接打开活动监视器，在里面搜java服务，强制关闭掉；这里需要注意，如果服务没有停止再进行jenkins开启是不成功的，提示会告诉你已经在用：</p><p><img src="http://static.zybuluo.com/usiege/s46xl40yzd7t5gijpwdippc9/image_1c0pu09in491qq31bqs25f1hbg26.png" alt="image_1c0pu09in491qq31bqs25f1hbg26.png-222.9kB"></p><p>如果你想查看是否jenkins在运行，使用命令查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep jenkins</span><br></pre></td></tr></table></figure></p><h2 id="关卡3-："><a href="#关卡3-：" class="headerlink" title="关卡3 ："></a>关卡3 ：</h2><p>安装并开启完成就可以在浏览器里输入<a href="localhost:8080" target="_blank" rel="noopener">localhost:8080</a>进行页面化配置了；<br>安装完成之后，Safari可能会自动打开，如果没有自动打开，打开浏览器，输入<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br><img src="http://static.zybuluo.com/usiege/fn2f1wx006r3chny2t5u9atc/image_1c0pvjgjqfbg3i01c371uhc1ves2j.png" alt="image_1c0pvjgjqfbg3i01c371uhc1ves2j.png-27.6kB"></p><p>这个时候可能会报一个错误。如果出现了这面的问题。出现这个问题的原因就是Java环境有问题，重启Java环境即可。</p><p>这个时候如果你重启电脑会发现Jenkins给你新增了一个用户，名字就叫Jenkins，不过这个时候你不知道密码。你可能会去试密码，肯定是是不对的，因为初始密码很复杂。这个时候正确做法是打开<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 会出现下图的重设初始密码的界面。</p><p><img src="http://static.zybuluo.com/usiege/sfnjgdq201o27xta3ttqllkr/image_1c0pvl71n5dulcc413164i1hcp30.png" alt="image_1c0pvl71n5dulcc413164i1hcp30.png-30.4kB"></p><p>按照提示，找到/Users/Shared/Jenkins/Home/ 这个目录下，这个目录虽然是共享目录，但是有权限的，非Jenkins用户/secrets/目录是没有读写权限的。</p><p><img src="http://static.zybuluo.com/usiege/ltc8z86hbmzy78857uo767zr/image_1c0pvm8al1tce1iled5voi216ac3d.png" alt="image_1c0pvm8al1tce1iled5voi216ac3d.png-200.2kB"></p><p>打开initialAdminPassword文件，复制出密码，就可以填到网页上去重置密码了。如下图</p><p><img src="http://static.zybuluo.com/usiege/ub5cnhcl82hyed8j8aqghlna/image_1c0pvp2p01fon1h2mmvjs6s1fuj3q.png" alt="image_1c0pvp2p01fon1h2mmvjs6s1fuj3q.png-99.6kB"></p><p>一路安装过来，输入用户名，密码，邮件这些，就算安装完成了。</p><p>还是继续登录localhost:8080</p><p>然而这一关还没有结束：<br>写blog的时候我把自己设置的帐号注销了，然而当时设置的密码却忘记了，怎么都想不起来，怎么办呢？<br>首先我想能不能用之前给的Jenkins帐户呢，经试错，未果；<br>接下来上百度查了几种方法，有的方法很复杂，不打算用，我们只用最简单粗暴的；只要之前的帐号信息没有丢失，又可以进入系统就OK了，于是：</p><p><img src="http://static.zybuluo.com/usiege/ihh8n31m9fb1r9gomahd7l6d/image_1c0q0bnonde9a9omqa1092a1747.png" alt="image_1c0q0bnonde9a9omqa1092a1747.png-85.9kB"></p><p>注意实际操作过程中发现不是<code>/User/Shared/Jenkins/Home</code>下的config.xml，也不是<code>/User/Shared/Jenkins/Home/users</code>下的config.xml，而是<strong>你自己用户目录</strong><code>~/.jenkins/</code>下的config.xml，具体原因可能是jenkins运行的工作空间是当前用户目录下的<code>.jenkins</code>，然后就是这样：</p><p><img src="http://static.zybuluo.com/usiege/rmn1oao4inl6rvryb8ne596c/image_1c0q277tu152r9mg1dhg1edq8jp5q.png" alt="image_1c0q277tu152r9mg1dhg1edq8jp5q.png-55.9kB"></p><p>经检验，无误，可进入，但是好像遗留了一个问题，就是这样进入的话就找不到管理用户的选项了；解决问题，勾选图中黄色圈，返回系统管理，出现管理用户（还是个隐藏道具）；<br><img src="http://static.zybuluo.com/usiege/v5zxzwu4pex59s78odynkkd6/image_1c0q3ukis1vlhib71uij1729ohs67.png" alt="image_1c0q3ukis1vlhib71uij1729ohs67.png-33.1kB"></p><p><img src="http://static.zybuluo.com/usiege/bxyfaeid922e3lf7dvuz9mh8/image_1c0q419b0164pqfe25d9br1fpt74.png" alt="image_1c0q419b0164pqfe25d9br1fpt74.png-39.8kB"></p><p><img src="http://static.zybuluo.com/usiege/burf10v126vjx00u2ym0h2bn/image_1c0q42m3mvf41d8fjs21ptb1ae77h.png" alt="image_1c0q42m3mvf41d8fjs21ptb1ae77h.png-11.4kB"></p><p>搞的像是特工登录非授权帐户一样，不管怎么说，总算是攻破了，进入下一关；</p><h2 id="关卡-4："><a href="#关卡-4：" class="headerlink" title="关卡 4："></a>关卡 4：</h2><p>先不管工程构建里那一堆设置，我们先来搞一下证书Cer，钥匙Keychain，配置文件Provisioning Profiles的一些问题：<br>首先去系统管理 -&gt; 管理插件 -&gt; 可选插件，搜索并安装Keychains and Provisioning Profiles Management插件；<br>进入插件：<br><img src="http://static.zybuluo.com/usiege/kgy8eq7ug16g0o1o4eotp3bw/image_1c0qeblep1tcj4m319ap1bek783ah.png" alt="image_1c0qeblep1tcj4m319ap1bek783ah.png-31.1kB"></p><p>不要关键去填下面的空，我会告诉你这是一道有选项的题目；进入文件目录，<code>Command + shift + G</code>，写下这样的路径<code>~/资源库/Keychains</code>，</p><p><img src="http://static.zybuluo.com/usiege/ebpz8l8bnnvlrr6oi3a0423h/image_1c0qekdqp9v712rd1gefjdr1fdcbe.png" alt="image_1c0qekdqp9v712rd1gefjdr1fdcbe.png-62.2kB"></p><p>这里我们把login.keychain-db上传到Jenkins里，但是Upload并不能上传这样后缀的文件，所以需要你手动把login.keychain-db修改成login.keychain（复制后再修改，以防止其他地方会引用到带-db）；上传完成后就会在下面出现你一些信息；然后打开你的钥匙串，这个知道在什么地方吧；</p><p><img src="http://static.zybuluo.com/usiege/w9l7f921rn6he0vx1vcqmu6a/image_1c0qet898q8m118mk2s6kj1cq5eb.png" alt="image_1c0qet898q8m118mk2s6kj1cq5eb.png-131kB"></p><p>点击打包所用到的证书，将红色框中的名称复制出来，添加到identities中；</p><p><img src="http://static.zybuluo.com/usiege/zc1wu103t1woz01fp07s80b7/image_1c0qf02rofnpc3r121c1nlb1mqteo.png" alt="image_1c0qf02rofnpc3r121c1nlb1mqteo.png-42.7kB"></p><p>如果有多个，则点击Add Code Signing Identity添加；</p><p>然后是PP文件，这些文件需要我们从系统PP文件夹下复制到Jenkins资源文件夹下，如下图两个路径：<br>这个是系统PP文件目录<br><img src="http://static.zybuluo.com/usiege/peonwampxc6wa9h3i2yuhfm5/image_1c0qkdte41j1rgq81k8v1bi19f4f5.png" alt="image_1c0qkdte41j1rgq81k8v1bi19f4f5.png-144.2kB"><br>这个是Jenkins PP文件目录<br><img src="http://static.zybuluo.com/usiege/v0firte6p13gwec9a133ixi1/image_1c0qkkk833p0nt18andthn9qfi.png" alt="image_1c0qkkk833p0nt18andthn9qfi.png-79.2kB"></p><p>Provisioning Profiles Directory Path 填写成，注意替换为自己的username：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/User/&#123;USERNAME&#125;/Library/MobileDevice/Provisioning Profiles</span><br></pre></td></tr></table></figure><p>接着去你苹果帐号里去找你对应打包所需要的PP文件，然后点upload上传到Jenkins环境里；<br>以上，证书部分解决；</p><h2 id="关卡-5"><a href="#关卡-5" class="headerlink" title="关卡 5"></a>关卡 5</h2><p>创建项目过程我们会对各个需要的项进行逐个描述：<br>点新建项目，输入项目名称，选择 构建一个自由风格的软件项目，然后确定，进入配置页面。<br><img src="http://static.zybuluo.com/usiege/1ytel52lwidafke7uv5rmgb0/image_1c0ql3ppk1bht1b5ms4hcui1jpjfv.png" alt="image_1c0ql3ppk1bht1b5ms4hcui1jpjfv.png-8.2kB"></p><ul><li>General<br>这个部分的内容都很浅显，没有什么可以说的，根据需要自行填充；这里说一下GitLab connection选项，因为我自己的工程是用gitlab管理的代码，所以需要在Jenkins里下一个Gitlab的插件，然后在里面进行帐号配置，可以采用帐号密码以及SSH的方式，具体这个部分会有一个SSH的坑，先不作分析，后面会讲到，我这里先用帐号密码的方式进行构建，经检验发现SSH方式非必要；</li></ul><p><strong>Credentials</strong>在这里配置：<br><img src="http://static.zybuluo.com/usiege/f6pv0rsip2oirn32m01agp1l/image_1c0qljaq610ljc02k6g1r821fs5gc.png" alt="image_1c0qljaq610ljc02k6g1r821fs5gc.png-78.2kB"></p><ul><li>源码管理<br>这里我选的Git，<strong>Repository URL</strong>填你工程的git地址，选用帐号密码的形式应该是以http或https开头的，<strong>Credentials</strong>填你在上一步中新建好的，<br><img src="http://static.zybuluo.com/usiege/bzufeuzktht55r97i2bsem18/image_1c0qlt20313duogl2g51hp11nqsgp.png" alt="image_1c0qlt20313duogl2g51hp11nqsgp.png-73kB"><br><strong>Branch Specifier (blank for ‘any’)</strong>    填你要进行构建的分支，我这里是<code>*/release</code>；</li></ul><p>这里我们PS一个隐藏BOSS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">returned status code 143 jenkins</span><br><span class="line">ERROR: Error fetching remote repo ‘origin’</span><br></pre></td></tr></table></figure></p><p>这个报错是工程配置结束后进行构建后提示的，我当时搞这个发现远程代码明明是已经拉取到本地的，只是在拉取过程中会发生中断，本人在进行了将近50次试错后发现这个拉取到本地的代码率是变化的，先前以为是SSH帐号的问题，于是转头花了一天的时间搞了下SSH，后来SSH搞通后发现该问题仍然存在，后来终于在经历百度，谷歌，搜狗也用上的（不得不说有时候百度搜不出来的搜狗能搜到），发现了几篇有用的，后来解决，也算是不负辛苦，后面有踩坑的伙伴多注意，前车之鉴后事之师；</p><p><a href="http://blog.sina.com.cn/s/blog_72ef7bea0102vo9w.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_72ef7bea0102vo9w.html</a><br><a href="https://issues.jenkins-ci.org/browse/JENKINS-20445" target="_blank" rel="noopener">https://issues.jenkins-ci.org/browse/JENKINS-20445</a><br><a href="https://stackoverflow.com/questions/35069079/jenkins-git-plugin-timeout-when-try-to-pull-repositoty-using-ssh" target="_blank" rel="noopener">https://stackoverflow.com/questions/35069079/jenkins-git-plugin-timeout-when-try-to-pull-repositoty-using-ssh</a></p><p>解决方案就在于这个<strong>Timeout</strong>，相信你看了这个单词就知道是怎么回事了：<br><img src="http://static.zybuluo.com/usiege/firl86lawiru1uvz1jhelb28/image_1c0qmnlafh2p1j571b4ettv1ncah6.png" alt="image_1c0qmnlafh2p1j571b4ettv1ncah6.png-74.3kB"></p><p>另顺便粘一个code 128的链接，是个与该问题相关的问题，因为这些问题关键字有的重复，所以搜出来的文章有时会误导，所以请仔细辨别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">returned status code 128 jenkins</span><br><span class="line">ERROR: Error cloning remote repo &apos;origin&apos;</span><br><span class="line">stderr: Permission denied (publickey).</span><br></pre></td></tr></table></figure></p><p><a href="http://wantcoding.com/?p=293" target="_blank" rel="noopener">http://wantcoding.com/?p=293</a><br><a href="http://www.cnblogs.com/EasonJim/p/6266892.html" target="_blank" rel="noopener">这个链接是附送的，进去多看看你会有惊喜，还有QQ群哦</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将以问题与解决方案的方式对Jenkins构建过程中的问题进行收录，后期会在评论中持续收集，如果有相同情况，请自行对照解决；&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="jenkins" scheme="http://charlesblog.site/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>记一次iOS上线提审</title>
    <link href="http://charlesblog.site/2017/12/07/%E8%AE%B0%E4%B8%80%E6%AC%A1iOS%E4%B8%8A%E7%BA%BF%E6%8F%90%E5%AE%A1/"/>
    <id>http://charlesblog.site/2017/12/07/记一次iOS上线提审/</id>
    <published>2017-12-07T09:50:00.000Z</published>
    <updated>2018-05-07T02:17:42.738Z</updated>
    
    <content type="html"><![CDATA[<p>公司最近的一次App提交过程中遇到的一些问题，现贴在这里，有检索到本篇的朋友们可借鉴。</p><a id="more"></a><p>首先是上传到iTunes Connect构建版本，点击以下蓝色按钮，之后会有苹果为你的代码进行检查：</p><p><img src="http://static.zybuluo.com/usiege/n72bt0t4wwh45zw5c0kjcv01/image_1bu7k3nt22m3cmearq636qua9.png" alt="image_1bu7k3nt22m3cmearq636qua9.png-14.8kB"></p><p>本人在ios11上做了提交，发现问题进行分类：</p><ol><li>第一个是第三方库存在x86_64,i386的链接库，有以下问题：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">ERROR ITMS-90087: &quot;Unsupported Architectures. The executable for LeWaiJiao.app/Frameworks/GCDWebServers.framework contains unsupported architectures &apos;[x86_64, i386]&apos;.&quot;</span><br></pre></td></tr></table></figure><p>PS:以下所有翻译来源于欧路词典，粘贴过来的，仅供参考；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">ERROR ITMS-90209: &quot;Invalid Segment Alignment. The app binary at &apos;LeWaiJiao.app/Frameworks/GCDWebServers.framework/GCDWebServers&apos; does not have proper segment alignment. Try rebuilding the app with the latest Xcode version.&quot;</span><br><span class="line">无效段对齐。应用程序二进制的“lewaijiao。应用程序/框架/ gcdwebservers。框架/ gcdwebservers”没有正确对齐。尝试用新的Xcode版本重建应用程序。</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">ERROR ITMS-90125: &quot;The binary is invalid. The encryption info in the LC_ENCRYPTION_INFO load command is either missing or invalid, or the binary is already encrypted. This binary does not seem to have been built with Apple&apos;s linker.&quot;</span><br><span class="line">“二进制无效。在lc_encryption_info负荷指令加密信息丢失或无效，或是已经加密的二进制。这个二进制文件似乎没有用苹果的链接器构建。”</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">WARNING ITMS-90080: &quot;The executable &apos;Payload/LeWaiJiao.app/Frameworks/GCDWebServers.framework&apos; is not a Position Independent Executable. Please ensure that your build settings are configured to create PIE executables. For more information refer to Technical Q&amp;A QA1788 - Building a Position Independent Executable in the iOS Developer Library.&quot;</span><br><span class="line">“可执行的有效载荷/ lewaijiao。应用程序/框架/ gcdwebservers。框架”不是一个独立的可执行文件的位置。请确保您的构建设置配置为创建饼可执行文件。更多信息请参阅技术问答qa1788在iOS开发者库位置独立的可执行的建筑。”</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR ITMS-90362: &quot;Invalid Info.plist value. The value for the key &apos;MinimumOSVersion&apos; in bundle ***.app/Frameworks/SDK.framework is invalid. The minimum value is 8.0&quot;</span><br></pre></td></tr></table></figure><p>后面这个<strong>90362</strong>貌似是连带问题，定位的时候发现与最小版本无关，所以一同被解决了；</p><p>解决方法呢是在该工程里添加脚本处理这些被添加进来的第三方库，如下：<br><img src="http://static.zybuluo.com/usiege/mqh6ttzi6hsixpddv5nmcu03/image_1bu7kmq06140t1nmhkf11sfq1civm.png" alt="image_1bu7kmq06140t1nmhkf11sfq1civm.png-235.5kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">APP_PATH=&quot;$&#123;TARGET_BUILD_DIR&#125;/$&#123;WRAPPER_NAME&#125;&quot;</span><br><span class="line"></span><br><span class="line"># This script loops through the frameworks embedded in the application and</span><br><span class="line"># removes unused architectures.</span><br><span class="line">find &quot;$APP_PATH&quot; -name &apos;*.framework&apos; -type d | while read -r FRAMEWORK</span><br><span class="line">do</span><br><span class="line">FRAMEWORK_EXECUTABLE_NAME=$(defaults read &quot;$FRAMEWORK/Info.plist&quot; CFBundleExecutable)</span><br><span class="line">FRAMEWORK_EXECUTABLE_PATH=&quot;$FRAMEWORK/$FRAMEWORK_EXECUTABLE_NAME&quot;</span><br><span class="line">echo &quot;Executable is $FRAMEWORK_EXECUTABLE_PATH&quot;</span><br><span class="line"></span><br><span class="line">EXTRACTED_ARCHS=()</span><br><span class="line"></span><br><span class="line">for ARCH in $ARCHS</span><br><span class="line">do</span><br><span class="line">echo &quot;Extracting $ARCH from $FRAMEWORK_EXECUTABLE_NAME&quot;</span><br><span class="line">lipo -extract &quot;$ARCH&quot; &quot;$FRAMEWORK_EXECUTABLE_PATH&quot; -o &quot;$FRAMEWORK_EXECUTABLE_PATH-$ARCH&quot;</span><br><span class="line">EXTRACTED_ARCHS+=(&quot;$FRAMEWORK_EXECUTABLE_PATH-$ARCH&quot;)</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;Merging extracted architectures: $&#123;ARCHS&#125;&quot;</span><br><span class="line">lipo -o &quot;$FRAMEWORK_EXECUTABLE_PATH-merged&quot; -create &quot;$&#123;EXTRACTED_ARCHS[@]&#125;&quot;</span><br><span class="line">rm &quot;$&#123;EXTRACTED_ARCHS[@]&#125;&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;Replacing original executable with thinned version&quot;</span><br><span class="line">rm &quot;$FRAMEWORK_EXECUTABLE_PATH&quot;</span><br><span class="line">mv &quot;$FRAMEWORK_EXECUTABLE_PATH-merged&quot; &quot;$FRAMEWORK_EXECUTABLE_PATH&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>以上代码来源于Google，解决方法经确认iOS11 + Xcode9.0有效；</p><ol start="2"><li>项目有icon不合规定的错误<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">ERROR ITMS-90717: &quot;Invalid App Store Icon. The App Store Icon in the asset catalog in &apos;LeWaiJiao.app&apos; can&apos;t be transparent nor contain an alpha channel.&quot;</span><br><span class="line">无效应用程序商店图标。在资产目录中的lewaijiao App Store图标，应用程序不能透明也包含alpha通道。”</span><br></pre></td></tr></table></figure></li></ol><p>该错误原因是上传的icon不符合苹果规定，公司项目存在的问题是1.使用了圆角；2.有透明alpha通道；<br>解决方法自然容易了，找设计重新做，自己解决的话第二个可以DIY，如下：</p><p><img src="http://static.zybuluo.com/usiege/xtde6py269a5m4iusbumms4p/image_1bu7l6vhrvhm51b13pjvrlc0p13.png" alt="image_1bu7l6vhrvhm51b13pjvrlc0p13.png-100.4kB"></p><p>用系统预览打开icon图片，点掉Alpha的勾，再保存就可以了；<br><img src="http://static.zybuluo.com/usiege/yql5tndy4d612fhqfsi9n4l2/image_1bu7l8bt61p6v1mp11csi15ri1dmg1g.png" alt="image_1bu7l8bt61p6v1mp11csi15ri1dmg1g.png-128.6kB"></p><ol start="3"><li>提交上传结束后又出现了一个问题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App Installation failed, No code signature found.</span><br></pre></td></tr></table></figure><p>真机无法运行了！这个问题纯属偶然，所以继续解决；打开终端，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk</span><br></pre></td></tr></table></figure><p>修改文件权限，然后修改字段属性，打开：</p><p><strong>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/SDKSettings.plist</strong></p><p>，修改 <strong>CODE_SIGNING_REQUIRED</strong> 字段为 <strong>YES</strong> ，保存；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司最近的一次App提交过程中遇到的一些问题，现贴在这里，有检索到本篇的朋友们可借鉴。&lt;/p&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="iOS" scheme="http://charlesblog.site/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Python-django安装</title>
    <link href="http://charlesblog.site/2017/10/25/Python-django%E5%AE%89%E8%A3%85/"/>
    <id>http://charlesblog.site/2017/10/25/Python-django安装/</id>
    <published>2017-10-25T11:56:00.000Z</published>
    <updated>2018-05-07T02:17:42.731Z</updated>
    
    <content type="html"><![CDATA[<p>django<br><a id="more"></a></p><ol><li><p>发现错误<br><img src="http://static.zybuluo.com/usiege/tvcs5iet0ge1yypcquu2swdq/image_1bt9d9b27bv5glj1a0m15hr1ncn9.png" alt="image_1bt9d9b27bv5glj1a0m15hr1ncn9.png-258.7kB"><br>怀疑是pip版本的问题；</p></li><li><p>于是查了下更新pip的方法： </p></li></ol><p>查看pip版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -version</span><br></pre></td></tr></table></figure></p><p>升级方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U pip</span><br></pre></td></tr></table></figure></p><p>如果pip出现有问题，或者你花了很长的时间想用pip安装，例如使用下面这种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==1.8.16</span><br></pre></td></tr></table></figure></p><p>如果你刚好安装成功，那么恭喜你；如果不是，那么我们就要使用另外一种方法； </p><ol start="3"><li>下载安装</li></ol><p><a href="https://github.com/django/django/archive/master.tar.gz" target="_blank" rel="noopener">gzip压缩包</a></p><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/django/django.git</span><br></pre></td></tr></table></figure></p><p>下载完成之后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf django-master.tar.gz</span><br><span class="line">cd django-master</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></p><p>会出现下面的问题：<br><img src="http://static.zybuluo.com/usiege/skgzjd12wfs2u973aidsrk7o/image_1bt9ib15m8juqh01adb1hlb154k9.png" alt="image_1bt9ib15m8juqh01adb1hlb154k9.png-97.5kB"><br>继续找：<br>Because you’re trying to install it on Python2, but the latest version of Django requires Python 3;<br>所以使用安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -e django</span><br></pre></td></tr></table></figure></p><p>这个仍然是联网安装，但是貌似<code>pytz</code>并不能连接上，vpn也不行；<br>所以:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd django</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></p><p>终于，你的django完成了；</p><p>续：<br>隔天使用以上的所有方法均可以，可能是十九大开会期间被墙掉了吧。<br><img src="http://static.zybuluo.com/usiege/06h0phv3szekmv2l4x2cmurb/image_1btbid9ijfnd1q2i15npd78l9p9.png" alt="image_1btbid9ijfnd1q2i15npd78l9p9.png-253.6kB"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="python" scheme="http://charlesblog.site/tags/python/"/>
    
      <category term="django" scheme="http://charlesblog.site/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>你的pod不工作了吗？</title>
    <link href="http://charlesblog.site/2017/10/17/%E4%BD%A0%E7%9A%84pod%E4%B8%8D%E5%B7%A5%E4%BD%9C%E4%BA%86%E5%90%97%EF%BC%9F/"/>
    <id>http://charlesblog.site/2017/10/17/你的pod不工作了吗？/</id>
    <published>2017-10-17T03:03:00.000Z</published>
    <updated>2018-05-07T02:17:42.735Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的项目需要添加几个依赖库，用pod更新的时候发现一直卡在了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Setting up CocoaPods master repo</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>继而是漫长的等待，在这个期间我不知道它发生了什么。</p><p>在这种等待中，程序员一般会选择做一些别的事情。于是我上网验证了一下我的行为，结论告诉我：</p><p>1.我要开个VPN；</p><p>2.我需要重新安装一下pod，因为它已经不工作了；</p><p>首先要先检查一下ruby源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>返回的结果是<a href="https://rubygems.org/，如果你在网上找到过其他源并且修改过它，并且你不确定你的源是否可以使用的话，那么请修改回来，买个VPN，这会让你节省很多不必要的劳动，你可以用以下代码修改源：" target="_blank" rel="noopener">https://rubygems.org/，如果你在网上找到过其他源并且修改过它，并且你不确定你的源是否可以使用的话，那么请修改回来，买个VPN，这会让你节省很多不必要的劳动，你可以用以下代码修改源：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#移除旧源</span><br><span class="line">gem sources --remove 旧源址</span><br><span class="line">#添加新源</span><br><span class="line">gem sources -a https://rubygems.org/</span><br></pre></td></tr></table></figure><p>PS:请确保你的源可用！！！</p><p>接着如果你没有安装pod，请执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>如果你已经安装pod，请执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>这个操作结束之后，又重现了一个漫长的等待过程，那么我们要清楚它是否在认真工作，请打开另外一个终端，我们要检查一下进度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#进入到pod目录</span><br><span class="line">cd ~/.cocoapods</span><br><span class="line"></span><br><span class="line">#检查当前文件下所有文件的大小，此后如果你不放心，可以分时段检查一下</span><br><span class="line">du -sh *</span><br></pre></td></tr></table></figure><p>这个过程会很漫长，取决于你VPN的速度，最后我这边出结果会反馈绿色的文字，Setup completed!文件总大小是1.2G，所以还是耐心的等待吧。。。</p><p>另外还有一点，如果上述<code>pod setup</code>出现红色的错误信息，也有可能是gem没有到最新版本，那么你还需要用你的VPN更新一下gem到最新；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure></p><p>PS:顺便记一下寻找库代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search AFNetworking</span><br></pre></td></tr></table></figure></p><p>这个时候会遇到这样的提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] Unable to find a pod with name, author, summary, or descriptionmatching `AFNetworking`</span><br></pre></td></tr></table></figure></p><p>你需要做如下操作，再进行搜索：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br></pre></td></tr></table></figure></p><p>最后你将如愿以偿，感谢亲人：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating search index for spec repo &apos;master&apos;.. Done!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司的项目需要添加几个依赖库，用pod更新的时候发现一直卡在了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Setting up CocoaPods master repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="CocaoPods" scheme="http://charlesblog.site/tags/CocaoPods/"/>
    
  </entry>
  
  <entry>
    <title>git checkout 与 reset</title>
    <link href="http://charlesblog.site/2017/08/18/git%20checkout%20%E4%B8%8E%20reset/"/>
    <id>http://charlesblog.site/2017/08/18/git checkout 与 reset/</id>
    <published>2017-08-18T09:34:00.000Z</published>
    <updated>2018-05-07T02:17:42.733Z</updated>
    
    <content type="html"><![CDATA[<p>公司最近的一次App提交过程中遇到的一些问题，现贴在这里，有检索到本篇的朋友们可借鉴。<br><a id="more"></a></p><p>首先是上传到iTunes Connect构建版本，点击以下蓝色按钮，之后会有苹果为你的代码进行检查：</p><p><img src="http://static.zybuluo.com/usiege/n72bt0t4wwh45zw5c0kjcv01/image_1bu7k3nt22m3cmearq636qua9.png" alt="image_1bu7k3nt22m3cmearq636qua9.png-14.8kB"></p><p>本人在ios11上做了提交，发现问题进行分类：</p><ol><li>第一个是第三方库存在x86_64,i386的链接库，有以下问题：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">ERROR ITMS-90087: &quot;Unsupported Architectures. The executable for LeWaiJiao.app/Frameworks/GCDWebServers.framework contains unsupported architectures &apos;[x86_64, i386]&apos;.&quot;</span><br></pre></td></tr></table></figure><p>PS:以下所有翻译来源于欧路词典，粘贴过来的，仅供参考；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">ERROR ITMS-90209: &quot;Invalid Segment Alignment. The app binary at &apos;LeWaiJiao.app/Frameworks/GCDWebServers.framework/GCDWebServers&apos; does not have proper segment alignment. Try rebuilding the app with the latest Xcode version.&quot;</span><br><span class="line">无效段对齐。应用程序二进制的“lewaijiao。应用程序/框架/ gcdwebservers。框架/ gcdwebservers”没有正确对齐。尝试用新的Xcode版本重建应用程序。</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">ERROR ITMS-90125: &quot;The binary is invalid. The encryption info in the LC_ENCRYPTION_INFO load command is either missing or invalid, or the binary is already encrypted. This binary does not seem to have been built with Apple&apos;s linker.&quot;</span><br><span class="line">“二进制无效。在lc_encryption_info负荷指令加密信息丢失或无效，或是已经加密的二进制。这个二进制文件似乎没有用苹果的链接器构建。”</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">WARNING ITMS-90080: &quot;The executable &apos;Payload/LeWaiJiao.app/Frameworks/GCDWebServers.framework&apos; is not a Position Independent Executable. Please ensure that your build settings are configured to create PIE executables. For more information refer to Technical Q&amp;A QA1788 - Building a Position Independent Executable in the iOS Developer Library.&quot;</span><br><span class="line">“可执行的有效载荷/ lewaijiao。应用程序/框架/ gcdwebservers。框架”不是一个独立的可执行文件的位置。请确保您的构建设置配置为创建饼可执行文件。更多信息请参阅技术问答qa1788在iOS开发者库位置独立的可执行的建筑。”</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR ITMS-90362: &quot;Invalid Info.plist value. The value for the key &apos;MinimumOSVersion&apos; in bundle ***.app/Frameworks/SDK.framework is invalid. The minimum value is 8.0&quot;</span><br></pre></td></tr></table></figure><p>后面这个<strong>90362</strong>貌似是连带问题，定位的时候发现与最小版本无关，所以一同被解决了；</p><p>解决方法呢是在该工程里添加脚本处理这些被添加进来的第三方库，如下：<br><img src="http://static.zybuluo.com/usiege/mqh6ttzi6hsixpddv5nmcu03/image_1bu7kmq06140t1nmhkf11sfq1civm.png" alt="image_1bu7kmq06140t1nmhkf11sfq1civm.png-235.5kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">APP_PATH=&quot;$&#123;TARGET_BUILD_DIR&#125;/$&#123;WRAPPER_NAME&#125;&quot;</span><br><span class="line"></span><br><span class="line"># This script loops through the frameworks embedded in the application and</span><br><span class="line"># removes unused architectures.</span><br><span class="line">find &quot;$APP_PATH&quot; -name &apos;*.framework&apos; -type d | while read -r FRAMEWORK</span><br><span class="line">do</span><br><span class="line">FRAMEWORK_EXECUTABLE_NAME=$(defaults read &quot;$FRAMEWORK/Info.plist&quot; CFBundleExecutable)</span><br><span class="line">FRAMEWORK_EXECUTABLE_PATH=&quot;$FRAMEWORK/$FRAMEWORK_EXECUTABLE_NAME&quot;</span><br><span class="line">echo &quot;Executable is $FRAMEWORK_EXECUTABLE_PATH&quot;</span><br><span class="line"></span><br><span class="line">EXTRACTED_ARCHS=()</span><br><span class="line"></span><br><span class="line">for ARCH in $ARCHS</span><br><span class="line">do</span><br><span class="line">echo &quot;Extracting $ARCH from $FRAMEWORK_EXECUTABLE_NAME&quot;</span><br><span class="line">lipo -extract &quot;$ARCH&quot; &quot;$FRAMEWORK_EXECUTABLE_PATH&quot; -o &quot;$FRAMEWORK_EXECUTABLE_PATH-$ARCH&quot;</span><br><span class="line">EXTRACTED_ARCHS+=(&quot;$FRAMEWORK_EXECUTABLE_PATH-$ARCH&quot;)</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;Merging extracted architectures: $&#123;ARCHS&#125;&quot;</span><br><span class="line">lipo -o &quot;$FRAMEWORK_EXECUTABLE_PATH-merged&quot; -create &quot;$&#123;EXTRACTED_ARCHS[@]&#125;&quot;</span><br><span class="line">rm &quot;$&#123;EXTRACTED_ARCHS[@]&#125;&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;Replacing original executable with thinned version&quot;</span><br><span class="line">rm &quot;$FRAMEWORK_EXECUTABLE_PATH&quot;</span><br><span class="line">mv &quot;$FRAMEWORK_EXECUTABLE_PATH-merged&quot; &quot;$FRAMEWORK_EXECUTABLE_PATH&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>以上代码来源于Google，解决方法经确认iOS11 + Xcode9.0有效；</p><ol start="2"><li>项目有icon不合规定的错误<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iTunes Store Operation Failed</span><br><span class="line">ERROR ITMS-90717: &quot;Invalid App Store Icon. The App Store Icon in the asset catalog in &apos;LeWaiJiao.app&apos; can&apos;t be transparent nor contain an alpha channel.&quot;</span><br><span class="line">无效应用程序商店图标。在资产目录中的lewaijiao App Store图标，应用程序不能透明也包含alpha通道。”</span><br></pre></td></tr></table></figure></li></ol><p>该错误原因是上传的icon不符合苹果规定，公司项目存在的问题是1.使用了圆角；2.有透明alpha通道；<br>解决方法自然容易了，找设计重新做，自己解决的话第二个可以DIY，如下：</p><p><img src="http://static.zybuluo.com/usiege/xtde6py269a5m4iusbumms4p/image_1bu7l6vhrvhm51b13pjvrlc0p13.png" alt="image_1bu7l6vhrvhm51b13pjvrlc0p13.png-100.4kB"></p><p>用系统预览打开icon图片，点掉Alpha的勾，再保存就可以了；<br><img src="http://static.zybuluo.com/usiege/yql5tndy4d612fhqfsi9n4l2/image_1bu7l8bt61p6v1mp11csi15ri1dmg1g.png" alt="image_1bu7l8bt61p6v1mp11csi15ri1dmg1g.png-128.6kB"></p><ol start="3"><li>提交上传结束后又出现了一个问题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App Installation failed, No code signature found.</span><br></pre></td></tr></table></figure><p>真机无法运行了！这个问题纯属偶然，所以继续解决；打开终端，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk</span><br></pre></td></tr></table></figure><p>修改文件权限，然后修改字段属性，打开：</p><p><strong>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/SDKSettings.plist</strong></p><p>，修改 <strong>CODE_SIGNING_REQUIRED</strong> 字段为 <strong>YES</strong> ，保存；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司最近的一次App提交过程中遇到的一些问题，现贴在这里，有检索到本篇的朋友们可借鉴。&lt;br&gt;
    
    </summary>
    
      <category term="coder" scheme="http://charlesblog.site/categories/coder/"/>
    
    
      <category term="git" scheme="http://charlesblog.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>雷神陨落与巨魔日衰</title>
    <link href="http://charlesblog.site/2016/09/17/%E9%9B%B7%E7%A5%9E%E9%99%A8%E8%90%BD%E4%B8%8E%E5%B7%A8%E9%AD%94%E6%97%A5%E8%A1%B0/"/>
    <id>http://charlesblog.site/2016/09/17/雷神陨落与巨魔日衰/</id>
    <published>2016-09-17T04:36:00.000Z</published>
    <updated>2018-05-07T02:17:42.738Z</updated>
    
    <content type="html"><![CDATA[<p>本篇讲述了魔古族和巨魔两大帝国的衰落，文章采用半文言体，不喜勿喷。</p><a id="more"></a><p>我们说，任何的暴虐都不会永远持续，任何的刚愎自用只会自取灭亡，任何的偏执疯狂都会招致灭鼎；雷神陨落，熊猫帝国，历史长河，匆匆而过。</p><blockquote><p>昔雷神称帝，建号魔古，灭诸国，囚天神，筑长城以御螳妖轮回，修地宫以显帝王之功，指点江山，挥斥方遒。</p></blockquote><blockquote><p>又艾泽巨魔赞达拉氏族盛极一时，其头领称祖拉瑟拉，与魔古呈鼎力之势。雷神欣喜，诚邀巨魔共谋大业，以得两族子嗣绵延。</p></blockquote><blockquote><p>巨魔之臣进言，“尝闻大陆以西，奥丹姆人杰地灵，托维尔一族据守，又有起源熔炉不熄，当取之。”两君商之，甚喜，遂派使者前去招安。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1429775-57b0747bd3ab4c11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>使者一路西行，源沙漠入，有幸见此地貌——苍翠雨林，清湖瀑布，土地平旷，金塔俨然，其中生灵奇景满目皆然，人间天堂，美不胜收。然托维尔一族早知雷神背叛行径，声称不与之同流合污，拒之。</p></blockquote><blockquote><p>雷神甚怒，集两族之势欲取之。大军压境，兵临城下。托维尔自知无力抵挡，启泰坦遗物，誓不让地一寸，欲与外敌同归黄泉。雷神率众冲锋，未觉异动，行至深处，四周隆隆，地裂数尺，颠簸起伏，能量倾泄，有吞天灭地之势。雷神卒，其众皆陨，奥丹姆不复往日，周遭死迹，颓萎崩裂。托维尔之族，有幸存者，现西去山路，以魔法蔽之，隐于世。</p></blockquote><blockquote><p>至于雷神之众，自是有逃出回国者，夺雷神尸体，于帝国征服者之墓供奉。赞达拉也再无兴风作浪之能是。有道是，多行不义必自毙。双魔帝国，国力渐衰。</p></blockquote><blockquote><p>魔古末年，帝称牢非，异号“缚奴”，生平极奢。其下熊猫人康，苦于皇帝压迫，又魔古自奥丹姆之役一蹶不振，遂揭竿而起。康深谙武道，教习众人，于魔古山宝库大胜牢非。各路诸侯见势，群雄尽起。猢狲、锦鱼人、土地精、野牛人，皆于各地抗击魔古。牢非不敌众人，退守锦绣谷，盘据帝国皇土。后康乘胜追击，杀牢非，废奴制，除不公，建新国。各种族相继称王，各国之间互通有无，繁荣之相，一派详和。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1429775-1922c521289b7024.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>魔古虽灭，巨魔又至。熊猫帝国初建，北御巨魔，南据螳妖。然国之武力，唯初时一众武僧，一拳难敌四手，战势危机。人曰，乱世当有才杰出。英雄救世不问出处，时有熊猫人蒋，幼时救猛兽云端翔龙，好生照料，翔龙喜，为之友，蒋以罗称。战事至翡翠林，蒋携罗从天而降，杀巨魔。巨魔又至，巨魔又败。凡艾泽拉斯之战，行此不义之师，多有英雄起而灭之，此为艾泽之福，众生之福。</p></blockquote><p>魔兽世界两大帝国，终因行不义之师，使得帝国终成明日黄花，往昔的繁荣，不过成历史长河中沧海一粟。一部魔兽历史，亦是一部世界历史，历史告诫我们，并非不义之师不能存在，而是因它有悖人道，必然不能长久，必然不能受到人们颂扬。历史只会记往那些给人们带来更好生活的人和事，于是我们有了这样的词语：英雄，事迹，杰出，仁治，盛世，爱戴，歌颂……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇讲述了魔古族和巨魔两大帝国的衰落，文章采用半文言体，不喜勿喷。&lt;/p&gt;
    
    </summary>
    
      <category term="Azeroth" scheme="http://charlesblog.site/categories/Azeroth/"/>
    
    
  </entry>
  
  <entry>
    <title>魔古帝国的形成与始皇帝雷神</title>
    <link href="http://charlesblog.site/2016/08/28/%E9%AD%94%E5%8F%A4%E5%B8%9D%E5%9B%BD%E7%9A%84%E5%BD%A2%E6%88%90%E4%B8%8E%E5%A7%8B%E7%9A%87%E5%B8%9D%E9%9B%B7%E7%A5%9E/"/>
    <id>http://charlesblog.site/2016/08/28/魔古帝国的形成与始皇帝雷神/</id>
    <published>2016-08-28T00:38:00.000Z</published>
    <updated>2018-05-07T02:17:42.739Z</updated>
    
    <content type="html"><![CDATA[<p>本篇我们说一说魔古一族。 </p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-1a255b2ce111d74f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="魔古族"></p><a id="more"></a><p>在讲魔古一族之前，首先我们先来总结一下魔兽世界的种族形成。截止到目前，我们从最初的泰坦创世，到现在我们所能讲到的各种族，大致可以将魔兽种族体系的形成分为了三个阶段。</p><p>第一个阶段是原始物种虚空大君、泰坦、纳鲁等的出现，至于怎么出现的就不要纠结了，这个问题同“女娲是怎么来的？”一样愚蠢；<br>第二个阶段是堕落泰坦变节与上古之神腐化初生泰坦，在艾泽拉斯大陆带来了两波黑暗势力，同时泰坦团们创造第一批泰坦造物守护者群，再加上艾泽拉斯原驻元素团体、荒野众神团，将战争引入艾泽拉斯早期大陆；<br>第三个阶段是第二阶段艾泽拉斯早期战争后期，双生熔炉创造第二代泰坦造物经过内战与对外战争、血肉诅咒逐渐形成魔兽现代种族的雏形，黑暗势力在各地的变种形成虫族与恶魔等种族，艾泽拉斯原驻物种发展形成龙类、自然神、元素等。<br>本篇要讲的魔古一族就是上面说的第三阶段中所说的第二代泰坦造物中的一支。</p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-39c9660f3e20627e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="艾泽拉斯物种"></p><p> 此前我们说到在守护者内乱后，大守护者莱便消失了。魔古一族一直坚守着锦绣谷，履行泰坦们给他们守护大地的任务。因为血肉诅咒的恐慌，造成了魔古内部军阀割剧的局面。</p><p>同巨魔族一样，魔古一族同样也面临着对外战争，即螳螂妖虫族的威胁。在魔古的对内对外战争期间，锦绣谷也同时发展起来锦鱼人、猴族以及熊猫人。熊猫一族与荒野众神中的白虎雪怒、青龙玉珑、朱鹤赤精、玄牛砮皂相交甚好，称它们为至尊天神。</p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-4b31199991e5f766.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="至尊天神"></p><p>魔古一族的统一，大抵是借鉴秦始皇一统天下的路子，而且也加入了一些美国大片中的个人英雄主义。首先出现了一个类似秦始皇的人物——雷神。<br>早年雷神的父亲被他的谋臣所害，雷神出逃，然而根据编年史的说法说他并没有寻仇也未继续加入魔古军阀战争，而是陷入了自身的思索，这一点上倒是很牵强。似乎魔兽世界观中对于某位英雄的个人转变处理都是通过个人的“思考”，像小萨因为思考得出“存在即是缺陷”，大守护者莱（莱登）的思考带来自己的郁郁而终，以及我们的雷神的思考。雷神我们认为他是带有主角光环的，入地宫，遇莱登。严厉指责守护者的不作为，后被莱登带往雷霆山，在这里，雷神得知泰坦团们的死亡后，夺取了泰坦残存力量，囚禁莱登。终于，一位枭雄诞生。</p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-82a6f74832f79ed6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="雷神"></p><p>凭借着泰坦力量，雷神一统魔古，并且创立了一个强大的魔古帝国。同秦始皇那样，他成为了魔古族的第一代皇帝。<br>雷神之后相继对锦鱼人、猴族、熊猫人发动战争，继雷神在昆莱山打败了至尊天神白虎后，这三个族均被雷神打败，熊猫人就此沦为奴隶；<br>由于螳螂妖一族族众众多，难以收服，雷神下令修筑“蟠龙脊”（这不就是万里长城么）以抵御敌人；<br>雷神还在锦绣谷以北找到泰坦造物纳拉克煞引擎（纳拉克不是一条龙么？），这个机器可以制造出由血肉和岩石塑造的新物种，由这个机器生产的新物种土地精、蜥蜴人诞生；</p><p>其实从编年史来看，雷神的确是参照始皇帝来的，他在建立帝国之后的书同文、车同轨、统一度量衡以及颁布第一部成文法典，我们简直不能用像来形容。就这样，雷神开始了他在艾泽拉斯南部的帝国统治。然而他始终无法抵挡血肉诅咒带给他的恐慌，为长生不老，他开始寻求种族逆转血肉的方法……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇我们说一说魔古一族。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1429775-1a255b2ce111d74f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;魔古族&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Azeroth" scheme="http://charlesblog.site/categories/Azeroth/"/>
    
    
  </entry>
  
  <entry>
    <title>巨魔与虫族的世纪之战</title>
    <link href="http://charlesblog.site/2016/08/26/%E5%B7%A8%E9%AD%94%E4%B8%8E%E8%99%AB%E6%97%8F%E7%9A%84%E4%B8%96%E7%BA%AA%E4%B9%8B%E6%88%98/"/>
    <id>http://charlesblog.site/2016/08/26/巨魔与虫族的世纪之战/</id>
    <published>2016-08-26T00:33:00.000Z</published>
    <updated>2018-05-07T02:17:42.736Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1429775-134a3bc6a48cb352.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>根据魔兽世界编年史的记录，巨魔一族永恒之井周围最早的原生物种。我们先来回顾一下永恒之井的产生，艾泽拉斯中心地带被最厉害的上古之神亚煞极占据，神父阿曼苏尔将其扯出，在破碎的泰坦身体处流出一道能量翔，这翔营养比较丰富，时间一长，周围自然而然的少不了吃翔的物种。<br><a id="more"></a></p><p>魔兽历史时间线黑门前一万六千年，艾泽拉斯原驻民在永恒之井的滋润下逐渐兴盛。巨魔就是这其中的一支。这个物种的有两个特点，第一，食人，第二，巫毒魔法。它们的信仰是荒野众神“洛阿”。集网友们的猜测与推断，巨魔的早期物种原型应该是南美印第安人，俗称玛雅人。而上面的两个特点是支撑这个观点的依据，后面我们会专门分析一下艾泽拉斯早期物种及其原型的猜想。</p><p>我们继续说回巨魔。早期的巨魔总结来说就是对内战争和对外战争的结合。我们说一个种族的强大是通过内部矛盾的发生来保持的，内部的竞争促进了各部族强壮的发育。巨魔一族在战争中逐渐崛起的部族分别是赞达拉，古拉巴什，阿曼尼和达卡莱。这四个部族我们在魔兽世界的前几个版本中都有接触过，其中赞达拉是在熊猫人大陆一个强悍的种族，古拉巴什在卡利姆多的祖尔法拉克，阿曼尼分布在祖阿曼和祖尔格拉布，而达卡莱则是在北极。</p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-14f0a671b878b7c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>人们常说，不作就不会死。这四个部族本来大家打的挺和谐，你争我抢的也分不出个胜负。可偏偏族内有巫师玩起通灵术，玩着玩着就玩出火，把恶魔给唤醒了。还记得跟守护者提尔打架的基希克斯吗？这个家伙就是上古神的小弟克瑟拉基大将，当初被洛肯派来追杀提尔未果，就跑到巨魔的地盘睡起觉来。结果就被巨魔人给吵醒了，基希克斯很生气，说：爬虫们，是什么样的祸事在这样早的时候发生，打断了老子的安睡？于是就把之前被提尔打散的亚基召唤回来，建立起个根据地叫做阿兹亚基（老子垃圾？）。</p><p>俗话说“兄弟隙于内，外御其辱”，巨魔眼看这外来物种甚是强大，各部族联合起来组成巨魔联盟，顺带着把他们大神洛阿请出来，一众人就跟基希克斯开干。说到底这临时组起来的队伍就是不行，基希克斯这回是彻底把自己给玩死了。树倒猢孙散，小弟一见老大死了，就转而去投靠别的老大。</p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-ef6eb5cedcaadb4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>赞达拉巨魔头领心想，这亚基也忒不行，打打就完蛋，打完这又要分地盘，不行得想办法给其他几个族支开。其他几个部族的头领也想自己不如赞达拉强，在这跟他争争不过，不如去别地占个山头去。于是大家开了个会，一致同意将这些跑的亚基赶尽杀绝，其实是明着分地盘。达莱卡向北追击，占据了北方冰封的土地；古拉巴什一族向西南进发，控制了原囚禁上古之神克苏恩的安其拉堡垒附近的大部分区域；阿曼尼一族则是去向了东北方基希克斯老巢，在那里建立起了圣城祖尔阿曼；剩下的赞达拉则继续在中部圣城祖尔达萨发布指令，起着联系各部族的作用。后期这个中心据点的作用逐渐被淡化，各巨魔在新领地形成了不同的种族特色与文化，赞达拉部族也退回了山地。 至于黑暗巨魔我们这里还没有涉及到，这个分支比较复杂，总体来看是部族间融合的结果。</p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-dd1611d508252c55.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这里顺道介绍下战败的亚基虫族的命运。亚基的四散也形成了不同的虫族分类，在北方的虫族由于受到尤格隆萨囚牢的影响，慢慢演化成奈幽虫族，在地底建立了强大的阿兹奥奈幽帝国；西南方虫族定居了安其拉神殿，受克苏恩的影响被改造成其拉虫人；东南方是古神亚煞极死去的地方，在这个地方定居下来的虫族在这里筑起了虫巢，叫做曼提维斯。 这就是魔兽世界巨魔和亚基虫两大种族的早期战争与分化过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1429775-134a3bc6a48cb352.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据魔兽世界编年史的记录，巨魔一族永恒之井周围最早的原生物种。我们先来回顾一下永恒之井的产生，艾泽拉斯中心地带被最厉害的上古之神亚煞极占据，神父阿曼苏尔将其扯出，在破碎的泰坦身体处流出一道能量翔，这翔营养比较丰富，时间一长，周围自然而然的少不了吃翔的物种。&lt;br&gt;
    
    </summary>
    
      <category term="Azeroth" scheme="http://charlesblog.site/categories/Azeroth/"/>
    
    
  </entry>
  
  <entry>
    <title>World of WarCarft插件的构成</title>
    <link href="http://charlesblog.site/2016/08/25/wow%E6%8F%92%E4%BB%B6%E7%9A%84%E6%9E%84%E6%88%90/"/>
    <id>http://charlesblog.site/2016/08/25/wow插件的构成/</id>
    <published>2016-08-25T03:21:00.000Z</published>
    <updated>2018-05-07T02:17:42.734Z</updated>
    
    <content type="html"><![CDATA[<p>今天来说一说wow插件是个什么鬼？<br><a id="more"></a></p><p>插件是魔兽世界开放的第三个接口，有朋友会问，什么是第三方？这个是软件业的一个术语，简单的说，就是游戏当中能让我们自己来定制DIY的部分，比方说对话界面，还有一些数据显示之类的功能。</p><p>wow的插件全部保存在<em>World of Warcraft/Interface/AddOns</em>目录下，在这个目录下会有一些暴雪自带的功能插件，它们均是以<em>Blizzard_</em>开头的，我们自己做的插件可以随意命名，不同插件可以分别放在不同的文件夹下面（我们在做插件的过程中，强烈建议用英文命名，避免因为中文导致插件无法被识别的问题）。<a href="http://www.townlong-yak.com/framexml/" target="_blank" rel="noopener">http://www.townlong-yak.com/framexml/</a>这个网址可以下载暴雪自带插件。</p><p>说一下插件的构成，打开插件目录，你会发现大致会有三种类型文件，分别是toc文件，xml文件和lua文件。</p><h2 id="toc文件"><a href="#toc文件" class="headerlink" title="toc文件"></a>toc文件</h2><p>这个文件是一个必要文件，它的名字与你的插件文件夹名字同名，只不过带了一个后缀toc，如果不同名的话，打开魔兽客户端将会无法识别你的插件；</p><p>注意！！！这个文件的每行开头不能有空格，每行仅作一个说明。</p><p>用文本工具打开toc文件，内容说明分三种类型：</p><h3 id="以-开头的数据"><a href="#以-开头的数据" class="headerlink" title="以##开头的数据"></a>以##开头的数据</h3><p>用来进行插件描述，一般会有插件名称，作者名称，功能描述等；它的基本格式是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## 标签名：标签值</span><br></pre></td></tr></table></figure><p>标签的名字可以随便写，但是有一些wow自带的标签名我们进行一下解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Interface:标记插件可用在的wow游戏版本，当该值小于低于当前游戏版本插件不会被加载；</span><br><span class="line">Title:插件名称，这个会被显示在游戏选择人物的插件列表里；</span><br><span class="line">Title-zhCN:插件的中文显示，如果想要在其他语言中显示，则修改-后面的就可以了；下面的Notes也是如此；</span><br><span class="line">Notes:插件列表中，鼠标移到插件名上时显示的信息；</span><br><span class="line">RequiredDeps, Dependencies, 或者任意以 &quot;Dep&quot; 开始的字符串：表示我们当前的插件必须需要加载的其他插件；</span><br><span class="line">OptionalDeps:与上面的对照，这里的插件是可选的；</span><br><span class="line">LoadOnDemand:值为1时，表示这个插件不会在游戏开始就加载，而是在需要的时候才加载；</span><br><span class="line">LoadWith:如果上面的值为1时，本条所描述的插件会随着本插件一起加载；</span><br><span class="line">LoadManagers:本条中所描述的插件如果都不存在的话，则会自动加载本插件；如果有一个存在，则按LoadOnDemand值为1处理；</span><br><span class="line">SavedVariables:一些以逗号分割的变量名称，这些变量会被保存在硬盘上，下次加载时可以被读取到；</span><br><span class="line">SavedVariablesPerCharacter:与上面的标签是相同的作用，不过该标签只用于保存不同角色的不同配置；</span><br><span class="line">DefaultState:本插件默认开启状态，值为disabled/enabled；</span><br><span class="line">Author:作者名字</span><br><span class="line">Version:插件的版本号</span><br></pre></td></tr></table></figure><p>另外你可以定义自己的标签，以上中最重要的就是前两个，尽量不要出错；</p><h3 id="本插件需要加载的代码文件"><a href="#本插件需要加载的代码文件" class="headerlink" title="本插件需要加载的代码文件"></a>本插件需要加载的代码文件</h3><p>列出需要加载的代码类文件，只支持lua和xml两种格式，这里的文件需要给出以当前目录为根目录的文件完整路径，就是说如果你插件目录下有一个<code>myaddon.lua</code>的文件则需要添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myaddon.lua</span><br></pre></td></tr></table></figure><p>而如果你插件目录下有一个子文件夹<em>MyAddon</em>，而该目录下有一个<code>myaddon2.lua</code>的话，则需要添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyAddon/myaddon2.lua</span><br></pre></td></tr></table></figure><h3 id="以-开头的文件"><a href="#以-开头的文件" class="headerlink" title="以#开头的文件"></a>以#开头的文件</h3><p>这些是注释文本，在toc中可以随便添加，主要用作插件制作者自己记录，这些不会被插件加载；</p><h2 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h2><p>xml文件主要用于插件的界面制作，以及事件绑定，事件绑定通俗的讲就是你对插件做某些操作（按一个按钮之类的）游戏中会出现的事件，这些事件会以一个方法的形式出现在lua文件中，你可以把你自己想做的事情写在这个方法中，如果你学过些编程，应该知道我们这里说的方法就是lua函数；</p><p>在你插件的根目录下会有一个叫做<strong>Bindings.xml</strong>的文件，这个文件会被游戏客户端自动读取，不必写在toc文件中；</p><p>我们来看一个该文件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Bindings&gt; </span><br><span class="line">    &lt;Binding name=&quot;CUBE_CODE&quot; header=&quot;CUBE&quot;&gt; </span><br><span class="line">      if IGAS.UIParent.Cube_Main then </span><br><span class="line">         IGAS.UIParent.Cube_Main.Visible = not IGAS.UIParent.Cube_Main.Visible </span><br><span class="line">      end </span><br><span class="line">    &lt;/Binding&gt; </span><br><span class="line">    &lt;Binding name=&quot;CUBE_DEBUG&quot;&gt; </span><br><span class="line">      if IGAS.UIParent.Cube_Debug then </span><br><span class="line">         IGAS.UIParent.Cube_Debug.Visible = not IGAS.UIParent.Cube_Debug.Visible </span><br><span class="line">      end </span><br><span class="line">    &lt;/Binding&gt; </span><br><span class="line">&lt;/Bindings&gt;</span><br></pre></td></tr></table></figure><p>我们暂时先不要管这些代码的意思，只需要知道这个文件设置了界面元素与游戏事件的绑定，而绑定的事件是由Lua文件完成的；<strong>Bindings.xml</strong>文件绑定了一个与插件名同名的lua文件，并且还将界面上的元素与该文件所描述的事件绑定在了一起：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Binding Text </span><br><span class="line">_G.BINDING_HEADER_CUBE = L[&quot;Cube&quot;] </span><br><span class="line">_G.BINDING_NAME_CUBE_CODE = L[&quot;Simple Dev Tool&quot;] </span><br><span class="line">_G.BINDING_NAME_CUBE_DEBUG = L[&quot;Simple Debug Tool&quot;]</span><br></pre></td></tr></table></figure><p>我们现在先不要管他们是怎么联系起来的，具体我们在之后的写代码过程中会慢慢讲到，现在只要理解一点，xml会定义我们的界面，并且还可以设置界面元素与事件的绑定，而绑定的事件会交由lua文件处理；</p><p>我们还可以加载其他的xml和lua文件，如下例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Ui xmlns=&quot;http://www.blizzard.com/wow/ui/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.blizzard.com/wow/ui/..\FrameXML\UI.xsd&quot;&gt; </span><br><span class="line">   &lt;!-- Init --&gt; </span><br><span class="line">   &lt;Script file = &quot;IGAS_Toolkit.lua&quot;/&gt; </span><br><span class="line"></span><br><span class="line">   &lt;!-- Modules --&gt; </span><br><span class="line">   &lt;Include file = &quot;Modules\AutoRepair\AutoRepair.xml&quot;/&gt; </span><br><span class="line">   &lt;Include file = &quot;Modules\AutoSell\AutoSell.xml&quot;/&gt; </span><br><span class="line">&lt;/Ui&gt;</span><br></pre></td></tr></table></figure><p>其中<strong>&lt;</strong> <strong>/&gt;</strong>这间的就是xml文件的标签，标签的类型会由<strong>&lt;</strong>后面的名称标识，如上<code>Script</code>这个标签用于加载lua文件，而<code>Include</code>用于加载其他的xml文件；</p><h2 id="lua文件"><a href="#lua文件" class="headerlink" title="lua文件"></a>lua文件</h2><p>Lua是wow插件逻辑的主要语言，做插件前需要先熟悉一下lua的语法，感兴趣的不防去知乎下搜索一些学习的建议，找一些入门的资料，在我的公众号给我留言，我们可以一起学习探讨下；这里我们给一些简短的片断，目的是了解一下它的作用；</p><p>假设我们现在做一个插件，名为DHAddon（想想DH是不是恶魔猎手的缩写呀？Devil Hunter?），插件里有两个Lua文件devil.lua hunter.lua;</p><p>wow加载它们的方式，类似下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- Load DHAddon </span><br><span class="line">local DHAddon = &#123;&#125; </span><br><span class="line"></span><br><span class="line">f = loadfile(&quot;devil.lua&quot;) </span><br><span class="line">f( &quot;DHAddon&quot;, DHAddon ) </span><br><span class="line"></span><br><span class="line">f = loadfile(&quot;hunter.lua&quot;) </span><br><span class="line">f( &quot;DHAddon&quot;, DHAddon )</span><br></pre></td></tr></table></figure><p>loadfile就是加载文件，文件名称用字符串表示（lua语法“”表示字符串）；加载的结果保存在f中；</p><p>devil.lua:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local addonName, addon = ... </span><br><span class="line"></span><br><span class="line">print(addonName .. &quot; is loaded.&quot;) </span><br><span class="line"></span><br><span class="line">addon.DHAddon = 123</span><br></pre></td></tr></table></figure><p>hunter.lua:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">local addonName, addon = ... </span><br><span class="line"></span><br><span class="line">print( &quot;DHAddon is &quot; .. addon.DHAddon )</span><br></pre></td></tr></table></figure><p>不出意外的话，运行结果会是：</p><p>DHAddon is loaded.<br>DHAddon is 123</p><p>另外上面的两个lua文件也可以下面这么写，其中有好多lua的内容，暂不解释原因，贴在这里之后了解到了再来回顾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 插件第一个Lua文件使用，这行代码确保以下的代码以addon为环境，而不是以_G为环境， </span><br><span class="line">-- 并且在addon环境中可以访问_G的任意变量，访问的变量值也将存储到addon中，便于下次直接访问 </span><br><span class="line">-- 下面的代码定义的全局变量都将保存在addon表中，而非_G </span><br><span class="line">setfenv(1, setmetatable(select(2, ...), &#123; __index = function(self,  key) local v = _G[key]; rawset(self, key, v); return v end &#125;)) </span><br><span class="line"></span><br><span class="line">function testA() </span><br><span class="line">    print(&quot;devil case A&quot;) </span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 插件的其他lua文件仅需要设置运行环境 </span><br><span class="line">setfenv(1, select(2, ...)) </span><br><span class="line"></span><br><span class="line">-- devil.lua 中定义的函数可以被直接调用 </span><br><span class="line">testA()</span><br></pre></td></tr></table></figure><p>插件的构成就说这么多，好多东西不是很懂，慢慢深入了解就好了；本篇就到这了，有兴趣的可以关注公众号“艾泽拉斯日常”，我们一同来探讨…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来说一说wow插件是个什么鬼？&lt;br&gt;
    
    </summary>
    
      <category term="wower" scheme="http://charlesblog.site/categories/wower/"/>
    
    
      <category term="addons" scheme="http://charlesblog.site/tags/addons/"/>
    
      <category term="wow" scheme="http://charlesblog.site/tags/wow/"/>
    
      <category term="toc" scheme="http://charlesblog.site/tags/toc/"/>
    
  </entry>
  
  <entry>
    <title>人类是如何产生的？魔兽告诉你</title>
    <link href="http://charlesblog.site/2016/08/18/%E4%BA%BA%E7%B1%BB%E6%98%AF%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F%E9%AD%94%E5%85%BD%E5%91%8A%E8%AF%89%E4%BD%A0/"/>
    <id>http://charlesblog.site/2016/08/18/人类是如何产生的？魔兽告诉你/</id>
    <published>2016-08-18T00:46:00.000Z</published>
    <updated>2018-05-07T02:17:42.734Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1429775-bc7aca2399e81c44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>图为古时维京人，可能与魔兽早期人类的原型有关，此篇不讨论。</p><a id="more"></a><p>今天我们要说的是，人类的崛起。</p><p>前面我们说到奥丁被洛肯封印在了英灵殿中，而追随他的泰坦造物也被洛肯流放到了卡利姆多的北方。这些泰坦造物里主要有两个分支，一个是维库人，一个是土灵。他们各自分裂成一些小的派系，在北方的土地上过着严酷的游牧生活。同时他们也受到了尤格隆萨的“血肉诅咒”使得他们不再拥有泰坦造物原有的特征：钢铁皮肤与长生不老。</p><p>接下来爆发了“冬履之战”，战斗主要涉及了洛肯嫡系部队火巨人沃坎及伊格尼斯，这两人在魔兽游戏里没有注意到，总之在魔兽编年史中的戏份不多，这里只是挑起了维库的冬履氏族和土灵人的战争，他们创造了熔火魔像和钢铁构造体，之后还奴役了元龙，冬履大战结束后却不知去向何处；接下来涉及到的是维库的冬履氏族和土灵，冬履氏族主动攻击了众多土灵，而土灵则请求守护者提尔的帮助；提尔后期又请求了五色元龙的援助，五色元龙参战。</p><p>战争结果是，冬履氏族被全数催眠封印在地底，土灵只有一小部分存活，后也被封印在了奥达曼中，元龙依旧履行起了守护世界的职责。</p><p>这样一来，在卡利姆多北方的土地上，只留下了部分的维库人氏族，其中最为强大的就是掠龙人氏族，而这个氏族，便是人类的祖先。</p><p>维库人无法抵御血肉诅咒，新生儿瘦小而畸形，不再拥有以前青铜皮肤。国王伊米隆为保护血脉的正统，下令将所有畸形的新生儿杀掉，以保持血脉的纯正。少数掠龙人并没有听从国王的指挥，而是选择了流亡，带着他们的子嗣开始了向南方漫长的迁徙。这些迁徙后的维库人而后会在南方建立起早期的人类国度，人类诞生。</p><p>总结一下，大致是一个不能称作为人类的种族在暴发了一系列战争之后逐渐可以被称作人类的漫长过程。</p><p>同样受到血肉诅咒的泰坦造物们也有着相同的命运，侏儒，托维尔，魔古族，巨人，矮人相继出现。这些受血肉诅咒的泰坦造物们组成了我们如今的魔兽世界。</p><p>从现在开始，泰坦与守护者将与我们远去，艾泽拉斯进入早期社会。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1429775-bc7aca2399e81c44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图为古时维京人，可能与魔兽早期人类的原型有关，此篇不讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="Azeroth" scheme="http://charlesblog.site/categories/Azeroth/"/>
    
    
  </entry>
  
  <entry>
    <title>北欧神话拾遗：“奥丁”，“英灵殿”，“提尔”，“西芙”，这些名字你知道吗？</title>
    <link href="http://charlesblog.site/2016/08/17/%E5%8C%97%E6%AC%A7%E7%A5%9E%E8%AF%9D%E6%8B%BE%E9%81%97%EF%BC%9A%E2%80%9C%E5%A5%A5%E4%B8%81%E2%80%9D%EF%BC%8C%E2%80%9C%E8%8B%B1%E7%81%B5%E6%AE%BF%E2%80%9D%EF%BC%8C%E2%80%9C%E6%8F%90%E5%B0%94%E2%80%9D%EF%BC%8C%E2%80%9C%E8%A5%BF%E8%8A%99%E2%80%9D%EF%BC%8C%E8%BF%99%E4%BA%9B%E5%90%8D%E5%AD%97%E4%BD%A0%E7%9F%A5%E9%81%93%E5%90%97%EF%BC%9F/"/>
    <id>http://charlesblog.site/2016/08/17/北欧神话拾遗：“奥丁”，“英灵殿”，“提尔”，“西芙”，这些名字你知道吗？/</id>
    <published>2016-08-17T00:48:00.000Z</published>
    <updated>2018-05-07T02:17:42.735Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1429775-b92b97202ecd19e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="奥丁"></p><a id="more"></a><p>奥丁是北欧阿斯神族的至高神，被视作诸神之王，也是死者之王、战神、权力之神、魔法之神。传说中，奥丁身形高大，身披金甲，骑八足神马“斯莱普尼斯”(Sleipnir)，手持名枪“冈格尼尔”(Gungnir)，居住在“瓦尔哈拉”的神殿中。他让女武神收集死者魂魄，为终末之战“诸神的黄昏”做准备。他的英名为历代北欧维京人所景仰，维京人坚信，如果英勇战死，就可以进入“瓦尔哈拉”，所以战斗勇猛无比，其势力曾席卷大半个欧洲。</p><blockquote><p>Valhalla，奥丁（Odin）在阿瑟加德有三处宫殿，其中有一个，位处格拉希尔（Glasir）树林之中，名为瓦尔哈拉（Valhalla，英灵殿），有五百四十个大门，每个门宽可容八百位战士并排进出。正门上方有一个野猪的头和一只鹰；这鹰的锐目能看见世界的各方。宫殿的四壁是由擦得极亮的矛所排成，所以光明炫耀；宫的顶是金盾铺成。宫内的座椅上皆覆以精美的铠甲，这是奥丁（Odin）给他的客人的礼物。凡是战死的勇士，所谓恩赫里亚（Einheriar），为奥丁（Odin）所器重者，皆得入此宫为上客。</p></blockquote><p>以上的介绍与魔兽世界中的奥丁的故事几乎是一模一样，甚至所谓的瓦尔哈拉即英灵殿用的同名。</p><p>西芙是雷神托尔的妻子，土地和收获女神。特别值得称道的是她有一头金色的长发，闪耀着比金子还要美丽的光泽。西芙女神为此感到非常的自豪，经常坐在她的花园中梳理那一头金发，这就引起了洛基恶作剧的念头。洛基在西芙睡觉的时候，把她引以为傲的一头金发剪得一干二净。洛基的恶作剧使得西芙非常地悲伤。就在西芙嘤嘤地哭泣的时候，雷神托尔回到了家中。托尔马上知道这是洛基干的坏事，于是冲出家门抓住了洛基，准备把他身上的骨头拆下来。洛基疼痛彻骨，拼命求饶，发誓去找侏儒国中的能工巧匠，为西芙打造一副一模一样的能够自由生长的金子头发。托尔的雷神之锤亦是洛基此行一并让侏儒工匠打造出的神器之一。</p><p>提尔是战神，巨人希米儿之子，《埃达》中将称他为“众神之父”。传说他是契约的担保人，盟誓的临护者。当其他的神为了将芬里斯怪狼捆绑起来的时候，提尔作为信用的保证人将手臂伸进狼的嘴里。狼发现搁绑它的众神实际上是设下圈套，立即咬断提尔的手臂。从此提尔成了独臂神。但他身佩宝剑，总显得威风凛凛。古代按剑盟誓的习俗即起源于北欧人对战神提尔的崇拜。许多传统的剑舞，都是为纪念战神而编导的。</p><p>霍迪尔是黑暗之神，巴德尔的孪生兄弟，双目失明。他生性忧郁孤僻，坚持与光明为敌。他受火神洛基指使，亲手杀死了自己的兄弟光明之神。</p><p>上面这些人便是上篇中说的一些人物的原型，他们之中有些人的故事经过扭曲，但大体上人物性格保留了下来，基本上魔兽世界对这些人物的处理还是比较善意的。总结来看，奥丁与英灵殿的故事是照搬，而且作为至高神的他是创世父阿曼苏尔的继承者也符合原型故事，后面英灵殿的放逐多半是带有魔幻色彩的，是暴雪一个比较微妙的处理；西芙的人设是作为一个中间人物来看的，由一个女人引发两个甚至更多男人之间的争斗这种桥段是很符合故事发展的，如果比较魔兽与北欧神话，也只能这样牵强的解释一下；而提尔依旧符合原神话的人设，魔兽中仍以战神来看待，同时独臂的故事更加深了这个人物的设定，魔兽中的白银之手更加深了人们对它的印象，可见北欧人对战神提尔的崇拜的确深入人心；而霍迪尔只是借用了它的名字而矣，魔兽是个庞大的世界观，要说其现实世界的灵感来源，通常我们更容易关注到的是更加便于识别的各类文化符号。</p><p>至于魔兽世界之后的种族又影射了哪些历史文化，知乎上有篇文章写的很好，关注公众号“艾泽拉斯日常”获取更多。之后我们也会在后来的文章中逐个深扒，看这样的一个游戏世界，究竟是怎样混杂出来的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1429775-b92b97202ecd19e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;奥丁&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Azeroth" scheme="http://charlesblog.site/categories/Azeroth/"/>
    
    
  </entry>
  
  <entry>
    <title>艾泽拉斯龙族的诞生</title>
    <link href="http://charlesblog.site/2016/08/16/%E8%89%BE%E6%B3%BD%E6%8B%89%E6%96%AF%E9%BE%99%E6%97%8F%E7%9A%84%E8%AF%9E%E7%94%9F/"/>
    <id>http://charlesblog.site/2016/08/16/艾泽拉斯龙族的诞生/</id>
    <published>2016-08-16T00:34:00.000Z</published>
    <updated>2018-05-07T02:17:42.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1429775-7db2fe0eb6e1a890.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><a id="more"></a><p>万神殿的大BOSS们培养了自己的继承者，放心的去度假了。不过走之前还留了个看家的，被称为观察者阿加隆。这个家伙厉害了，它的能力就是清楚艾泽拉斯的一切，所以守护者们也都不敢惹。听说过白银之手骑士团吧，白银之手就是提尔之手，是不是想到了什么？大BOSS们走了之后，艾泽拉斯是更加的不太平。上回说到元素有了血肉之后就叫做，元龙，这个物种比较狂暴。其中有一个头目叫做迦拉克隆，这个家伙除了比较厉害还有一个特点，就是吃同类，吃了以后呢还长。于是越长越大，没人能收拾得了。我觉得魔兽争覇中冰霜巨龙的原型就应该是它，编年体中还说它后来带了一支亡灵军团，那这样就验证了这一点。</p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-de109639dcc950a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="迦拉克隆"></p><p>守护者提尔率先发现了它并准备解决掉这个祸害，但是他的守护者朋友们没有来帮助他的，他只能去找一些帮手。他从元龙中找到了几条能力强大的队友，它们就是后来的龙族头目，它们分别是，阿莱克兹塔萨、耐萨里奥、玛里苟斯、伊瑟拉、诺兹多姆。讲到这终于有好多名字开始熟悉起来，这五条龙就是我们在魔兽资料片中遇到的那五条守护巨龙。它们和提尔一同杀掉了吃同类的迦拉克隆，还记得北极的龙眠神殿吗，在它北部的龙骨荒野就是迦拉克隆最后死的地方。当然这个故事的主人公是我们的提尔，在与迦拉克隆的对战中起主导作用的还是守护者力量，只是战斗的过程中，提尔被大家伙咬断手臂，提尔后来用一条白银手臂替代了自己被咬断的石头臂膀，它象征着正义和英勇。</p><p><img src="http://upload-images.jianshu.io/upload_images/1429775-a2cf7b3d35d534e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="龙骨荒野"></p><p>这次战斗为表彰五条元龙的助力，守护者们除奥丁一人均选定了自己的继承者们，于是第二批守护者诞生，五条守护巨龙分别各司其职，红龙阿莱克兹塔萨是生命女王，青铜龙诺兹多姆掌管时间的力量，蓝龙玛里苟斯控制魔法，绿龙伊瑟拉掌控梦境之力，黑龙耐萨里奥则拥有大地之力。龙眠神殿就从此在龙骨荒野建起，各龙随后各自领导了五色龙族。龙族历史开始。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1429775-7db2fe0eb6e1a890.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Azeroth" scheme="http://charlesblog.site/categories/Azeroth/"/>
    
    
  </entry>
  
</feed>
